"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createLocalTarballFetcher = void 0;
const path_1 = __importDefault(require("path"));
const graceful_fs_1 = __importDefault(require("@pnpm/graceful-fs"));
const ssri_1 = __importDefault(require("ssri"));
const remoteTarballFetcher_1 = require("./remoteTarballFetcher");
const isAbsolutePath = /^[/]|^[A-Za-z]:/;
function createLocalTarballFetcher() {
    const fetch = (cafs, resolution, opts) => {
        const tarball = resolvePath(opts.lockfileDir, resolution.tarball.slice(5));
        return fetchFromLocalTarball(cafs, tarball, {
            integrity: resolution.integrity,
            manifest: opts.manifest,
        });
    };
    return fetch;
}
exports.createLocalTarballFetcher = createLocalTarballFetcher;
function resolvePath(where, spec) {
    if (isAbsolutePath.test(spec))
        return spec;
    return path_1.default.resolve(where, spec);
}
async function fetchFromLocalTarball(cafs, tarball, opts) {
    try {
        const tarballStream = graceful_fs_1.default.createReadStream(tarball);
        const [fetchResult] = (await Promise.all([
            cafs.addFilesFromTarball(tarballStream, opts.manifest),
            opts.integrity && ssri_1.default.checkStream(tarballStream, opts.integrity), // eslint-disable-line
        ]));
        return { filesIndex: fetchResult };
    }
    catch (err) { // eslint-disable-line
        const error = new remoteTarballFetcher_1.TarballIntegrityError({
            attempts: 1,
            algorithm: err['algorithm'],
            expected: err['expected'],
            found: err['found'],
            sri: err['sri'],
            url: tarball,
        });
        // @ts-expect-error
        error['resource'] = tarball;
        throw error;
    }
}
//# sourceMappingURL=localTarballFetcher.js.map