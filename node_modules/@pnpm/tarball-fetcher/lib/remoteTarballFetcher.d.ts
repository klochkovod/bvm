/// <reference types="node" />
import { type IncomingMessage } from 'http';
import { PnpmError } from '@pnpm/error';
import { type FetchResult } from '@pnpm/fetcher-base';
import type { Cafs, DeferredManifestPromise } from '@pnpm/cafs-types';
import { type FetchFromRegistry } from '@pnpm/fetching-types';
export declare class TarballIntegrityError extends PnpmError {
    readonly found: string;
    readonly expected: string;
    readonly algorithm: string;
    readonly sri: string;
    readonly url: string;
    constructor(opts: {
        attempts?: number;
        found: string;
        expected: string;
        algorithm: string;
        sri: string;
        url: string;
    });
}
export interface HttpResponse {
    body: string;
}
export type DownloadFunction = (url: string, opts: {
    getAuthHeaderByURI: (registry: string) => string | undefined;
    cafs: Cafs;
    manifest?: DeferredManifestPromise;
    registry?: string;
    onStart?: (totalSize: number | null, attempt: number) => void;
    onProgress?: (downloaded: number) => void;
    integrity?: string;
}) => Promise<FetchResult>;
export interface NpmRegistryClient {
    get: (url: string, getOpts: object, cb: (err: Error, data: object, raw: object, res: HttpResponse) => void) => void;
    fetch: (url: string, opts: {
        auth?: object;
    }, cb: (err: Error, res: IncomingMessage) => void) => void;
}
export declare function createDownloader(fetchFromRegistry: FetchFromRegistry, gotOpts: {
    retry?: {
        retries?: number;
        factor?: number;
        minTimeout?: number;
        maxTimeout?: number;
        randomize?: boolean;
    };
    timeout?: number;
}): DownloadFunction;
