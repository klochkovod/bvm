"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const safe_execa_1 = __importDefault(require("safe-execa"));
const path_extender_windows_1 = require("./path-extender-windows");
const prepare_1 = require("@pnpm/prepare");
jest.mock('safe-execa');
let originalShell;
let originalPlatform = '';
beforeEach(() => {
    safe_execa_1.default['mockReset']();
});
beforeAll(() => {
    originalShell = process.env.SHELL;
    originalPlatform = process.platform;
    process.env.SHELL = '';
    Object.defineProperty(process, 'platform', {
        value: 'win32',
    });
});
afterAll(() => {
    process.env.SHELL = originalShell;
    Object.defineProperty(process, 'platform', {
        value: originalPlatform,
    });
});
const regKey = 'HKEY_CURRENT_USER\\Environment';
function createExecaError({ stderr }) {
    const err = new Error('Command failed with exit code 1');
    err['stderr'] = stderr;
    return err;
}
test('win32 registry environment values could not be retrieved', () => __awaiter(void 0, void 0, void 0, function* () {
    safe_execa_1.default['mockResolvedValueOnce']({
        failed: false,
        stdout: '活动代码页: 936',
    }).mockResolvedValueOnce({
        failed: false,
        stdout: '',
    }).mockRejectedValue(createExecaError({ stderr: 'ERROR: Some error' }));
    yield expect((0, path_extender_windows_1.addDirToWindowsEnvPath)((0, prepare_1.tempDir)(false), { proxyVarName: 'PNPM_HOME' }))
        .rejects.toThrow();
}));
test('environment Path is not configured correctly', () => __awaiter(void 0, void 0, void 0, function* () {
    safe_execa_1.default['mockResolvedValueOnce']({
        failed: false,
        stdout: '活动代码页: 936',
    }).mockResolvedValueOnce({
        failed: false,
        stdout: 'SOME KIND OF ERROR OR UNSUPPORTED RESPONSE FORMAT',
    }).mockResolvedValue({
        failed: false,
        stdout: '',
    });
    yield expect((0, path_extender_windows_1.addDirToWindowsEnvPath)((0, prepare_1.tempDir)(false), { proxyVarName: 'PNPM_HOME' })).rejects.toThrow(/"Path" environment variable is not found/);
    expect(safe_execa_1.default).toHaveBeenNthCalledWith(3, 'reg', ['query', regKey], { windowsHide: false });
}));
test('environment Path is empty', () => __awaiter(void 0, void 0, void 0, function* () {
    safe_execa_1.default['mockResolvedValueOnce']({
        failed: false,
        stdout: '活动代码页: 936',
    }).mockResolvedValueOnce({
        failed: false,
        stdout: '',
    }).mockResolvedValueOnce({
        failed: false,
        stdout: `
HKEY_CURRENT_USER\\Environment
    Path    REG_EXPAND_SZ
    `,
    }).mockResolvedValue({
        failed: false,
        stdout: '',
    });
    yield expect((0, path_extender_windows_1.addDirToWindowsEnvPath)((0, prepare_1.tempDir)(false), { proxyVarName: 'PNPM_HOME' })).rejects.toThrow(/"Path" environment variable is not found/);
    expect(safe_execa_1.default).toHaveBeenNthCalledWith(3, 'reg', ['query', regKey], { windowsHide: false });
}));
test('successful first time installation', () => __awaiter(void 0, void 0, void 0, function* () {
    const currentPathInRegistry = '%USERPROFILE%\\AppData\\Local\\Microsoft\\WindowsApps;%USERPROFILE%\\.config\\etc;';
    safe_execa_1.default['mockResolvedValueOnce']({
        failed: false,
        stdout: '活动代码页: 936',
    }).mockResolvedValueOnce({
        failed: false,
        stdout: '',
    }).mockResolvedValueOnce({
        failed: false,
        stdout: `
HKEY_CURRENT_USER\\Environment
    Path    REG_EXPAND_SZ    ${currentPathInRegistry}
`,
    }).mockResolvedValueOnce({
        failed: false,
        stdout: 'PNPM_HOME ENV VAR SET',
    }).mockResolvedValueOnce({
        failed: false,
        stdout: 'setx PNPM_HOME',
    }).mockResolvedValueOnce({
        failed: false,
        stdout: 'setx PNPM_HOME',
    }).mockResolvedValue({
        failed: true,
        stderr: 'UNEXPECTED',
    });
    const pnpmHomeDir = (0, prepare_1.tempDir)(false);
    const pnpmHomeDirNormalized = path_1.win32.normalize(pnpmHomeDir);
    const report = yield (0, path_extender_windows_1.addDirToWindowsEnvPath)(pnpmHomeDir, { proxyVarName: 'PNPM_HOME' });
    expect(report).toStrictEqual([
        {
            action: 'updated',
            variable: 'PNPM_HOME',
            oldValue: undefined,
            newValue: pnpmHomeDirNormalized,
        },
        {
            action: 'updated',
            variable: 'Path',
            oldValue: currentPathInRegistry,
            newValue: `%PNPM_HOME%;${currentPathInRegistry}`,
        },
    ]);
    expect(safe_execa_1.default).toHaveBeenNthCalledWith(3, 'reg', ['query', regKey], { windowsHide: false });
    expect(safe_execa_1.default).toHaveBeenNthCalledWith(4, 'reg', ['add', regKey, '/v', 'PNPM_HOME', '/t', 'REG_SZ', '/d', pnpmHomeDirNormalized, '/f'], { windowsHide: false });
    expect(safe_execa_1.default).toHaveBeenNthCalledWith(5, 'reg', ['add', regKey, '/v', 'Path', '/t', 'REG_EXPAND_SZ', '/d', `%PNPM_HOME%;${currentPathInRegistry}`, '/f'], { windowsHide: false });
    expect(safe_execa_1.default).toHaveBeenNthCalledWith(6, 'setx', ['REFRESH_ENV_VARS', '1'], { windowsHide: false });
    expect(safe_execa_1.default).toHaveBeenNthCalledWith(7, 'reg', ['delete', regKey, '/v', 'REFRESH_ENV_VARS', '/f'], { windowsHide: false });
}));
test('successful first time installation when no additional env variable is used', () => __awaiter(void 0, void 0, void 0, function* () {
    const currentPathInRegistry = '%USERPROFILE%\\AppData\\Local\\Microsoft\\WindowsApps;%USERPROFILE%\\.config\\etc;';
    safe_execa_1.default['mockResolvedValueOnce']({
        failed: false,
        stdout: '活动代码页: 936',
    }).mockResolvedValueOnce({
        failed: false,
        stdout: '',
    }).mockResolvedValueOnce({
        failed: false,
        stdout: `
HKEY_CURRENT_USER\\Environment
    Path    REG_EXPAND_SZ    ${currentPathInRegistry}
`,
    }).mockResolvedValueOnce({
        failed: false,
        stdout: 'PNPM_HOME ENV VAR SET',
    }).mockResolvedValueOnce({
        failed: false,
        stdout: 'setx PNPM_HOME',
    }).mockResolvedValueOnce({
        failed: false,
        stdout: 'setx PNPM_HOME',
    }).mockResolvedValue({
        failed: true,
        stderr: 'UNEXPECTED',
    });
    const pnpmHomeDir = (0, prepare_1.tempDir)(false);
    const pnpmHomeDirNormalized = path_1.win32.normalize(pnpmHomeDir);
    const report = yield (0, path_extender_windows_1.addDirToWindowsEnvPath)(pnpmHomeDir);
    expect(report).toStrictEqual([
        {
            action: 'updated',
            variable: 'Path',
            oldValue: currentPathInRegistry,
            newValue: `${pnpmHomeDirNormalized};${currentPathInRegistry}`,
        },
    ]);
    expect(safe_execa_1.default).toHaveBeenNthCalledWith(3, 'reg', ['query', regKey], { windowsHide: false });
    expect(safe_execa_1.default).toHaveBeenNthCalledWith(4, 'reg', ['add', regKey, '/v', 'Path', '/t', 'REG_EXPAND_SZ', '/d', `${pnpmHomeDirNormalized};${currentPathInRegistry}`, '/f'], { windowsHide: false });
    expect(safe_execa_1.default).toHaveBeenNthCalledWith(5, 'setx', ['REFRESH_ENV_VARS', '1'], { windowsHide: false });
    expect(safe_execa_1.default).toHaveBeenNthCalledWith(6, 'reg', ['delete', regKey, '/v', 'REFRESH_ENV_VARS', '/f'], { windowsHide: false });
}));
test('adding the directory to the end of Path', () => __awaiter(void 0, void 0, void 0, function* () {
    const currentPathInRegistry = '%USERPROFILE%\\AppData\\Local\\Microsoft\\WindowsApps;%USERPROFILE%\\.config\\etc;';
    safe_execa_1.default['mockResolvedValueOnce']({
        failed: false,
        stdout: '活动代码页: 936',
    }).mockResolvedValueOnce({
        failed: false,
        stdout: '',
    }).mockResolvedValueOnce({
        failed: false,
        stdout: `
HKEY_CURRENT_USER\\Environment
    Path    REG_EXPAND_SZ    ${currentPathInRegistry}
`,
    }).mockResolvedValueOnce({
        failed: false,
        stdout: 'PNPM_HOME ENV VAR SET',
    }).mockResolvedValueOnce({
        failed: false,
        stdout: 'setx PNPM_HOME',
    }).mockResolvedValueOnce({
        failed: false,
        stdout: 'setx PNPM_HOME',
    }).mockResolvedValue({
        failed: true,
        stderr: 'UNEXPECTED',
    });
    const pnpmHomeDir = (0, prepare_1.tempDir)(false);
    const pnpmHomeDirNormalized = path_1.win32.normalize(pnpmHomeDir);
    const report = yield (0, path_extender_windows_1.addDirToWindowsEnvPath)(pnpmHomeDir, { position: 'end' });
    expect(report).toStrictEqual([
        {
            action: 'updated',
            variable: 'Path',
            oldValue: currentPathInRegistry,
            newValue: `${currentPathInRegistry};${pnpmHomeDirNormalized}`,
        },
    ]);
    expect(safe_execa_1.default).toHaveBeenNthCalledWith(3, 'reg', ['query', regKey], { windowsHide: false });
    expect(safe_execa_1.default).toHaveBeenNthCalledWith(4, 'reg', ['add', regKey, '/v', 'Path', '/t', 'REG_EXPAND_SZ', '/d', `${currentPathInRegistry};${pnpmHomeDirNormalized}`, '/f'], { windowsHide: false });
    expect(safe_execa_1.default).toHaveBeenNthCalledWith(5, 'setx', ['REFRESH_ENV_VARS', '1'], { windowsHide: false });
    expect(safe_execa_1.default).toHaveBeenNthCalledWith(6, 'reg', ['delete', regKey, '/v', 'REFRESH_ENV_VARS', '/f'], { windowsHide: false });
}));
test('PNPM_HOME is already set, but Path is updated', () => __awaiter(void 0, void 0, void 0, function* () {
    const currentPathInRegistry = '%USERPROFILE%\\AppData\\Local\\Microsoft\\WindowsApps;%USERPROFILE%\\.config\\etc;';
    const pnpmHomeDir = (0, prepare_1.tempDir)(false);
    const pnpmHomeDirNormalized = path_1.win32.normalize(pnpmHomeDir);
    safe_execa_1.default['mockResolvedValueOnce']({
        failed: false,
        stdout: '活动代码页: 936',
    }).mockResolvedValueOnce({
        failed: false,
        stdout: '',
    }).mockResolvedValueOnce({
        failed: false,
        stdout: `
HKEY_CURRENT_USER\\Environment
    PNPM_HOME    REG_EXPAND_SZ    ${pnpmHomeDirNormalized}
    Path    REG_EXPAND_SZ    ${currentPathInRegistry}
`,
    }).mockResolvedValueOnce({
        failed: false,
        stdout: 'Path UPDATED',
    }).mockResolvedValueOnce({
        failed: false,
        stdout: 'setx PATH',
    }).mockResolvedValue({
        failed: true,
        stderr: 'UNEXPECTED',
    });
    const report = yield (0, path_extender_windows_1.addDirToWindowsEnvPath)(pnpmHomeDir, { proxyVarName: 'PNPM_HOME' });
    expect(report).toStrictEqual([
        {
            variable: 'PNPM_HOME',
            action: 'skipped',
            oldValue: pnpmHomeDirNormalized,
            newValue: pnpmHomeDirNormalized,
        },
        {
            variable: 'Path',
            action: 'updated',
            oldValue: currentPathInRegistry,
            newValue: `%PNPM_HOME%;${currentPathInRegistry}`,
        },
    ]);
    expect(safe_execa_1.default).toHaveBeenNthCalledWith(3, 'reg', ['query', regKey], { windowsHide: false });
    expect(safe_execa_1.default).toHaveBeenNthCalledWith(4, 'reg', ['add', regKey, '/v', 'Path', '/t', 'REG_EXPAND_SZ', '/d', `%PNPM_HOME%;${currentPathInRegistry}`, '/f'], { windowsHide: false });
    expect(safe_execa_1.default).toHaveBeenNthCalledWith(5, 'setx', ['REFRESH_ENV_VARS', '1'], { windowsHide: false });
    expect(safe_execa_1.default).toHaveBeenNthCalledWith(6, 'reg', ['delete', regKey, '/v', 'REFRESH_ENV_VARS', '/f'], { windowsHide: false });
}));
test('setup throws an error if PNPM_HOME is already set to a different directory', () => __awaiter(void 0, void 0, void 0, function* () {
    safe_execa_1.default['mockResolvedValueOnce']({
        failed: false,
        stdout: '活动代码页: 936',
    }).mockResolvedValueOnce({
        failed: false,
        stdout: '',
    }).mockResolvedValueOnce({
        failed: false,
        stdout: `
HKEY_CURRENT_USER\\Environment
    PNPM_HOME    REG_EXPAND_SZ    .pnpm\\home
    Path    REG_EXPAND_SZ    %USERPROFILE%\\AppData\\Local\\Microsoft\\WindowsApps;%USERPROFILE%\\.config\\etc;.pnpm\\home;C:\\Windows;
`,
    }).mockResolvedValue({
        failed: true,
        stderr: 'UNEXPECTED',
    });
    const pnpmHomeDir = (0, prepare_1.tempDir)(false);
    yield expect((0, path_extender_windows_1.addDirToWindowsEnvPath)(pnpmHomeDir, { proxyVarName: 'PNPM_HOME' })).rejects.toThrowError(/Currently 'PNPM_HOME' is set to/);
}));
test('setup overwrites PNPM_HOME, when setup is forced', () => __awaiter(void 0, void 0, void 0, function* () {
    safe_execa_1.default['mockReset']();
    safe_execa_1.default['mockResolvedValueOnce']({
        failed: false,
        stdout: '活动代码页: 936',
    }).mockResolvedValueOnce({
        failed: false,
        stdout: '',
    }).mockResolvedValueOnce({
        failed: false,
        stdout: `
HKEY_CURRENT_USER\\Environment
    PNPM_HOME    REG_EXPAND_SZ    .pnpm\\home
    Path    REG_EXPAND_SZ    %USERPROFILE%\\AppData\\Local\\Microsoft\\WindowsApps;%USERPROFILE%\\.config\\etc;.pnpm\\home;C:\\Windows;
`,
    }).mockResolvedValueOnce({
        failed: false,
        stdout: '',
    }).mockResolvedValueOnce({
        failed: false,
        stdout: '',
    }).mockResolvedValueOnce({}).mockResolvedValueOnce({
        failed: false,
        stdout: '',
    }).mockResolvedValueOnce({
        failed: false,
        stdout: '',
    }).mockResolvedValue({
        failed: true,
        stderr: 'UNEXPECTED',
    });
    const pnpmHomeDir = (0, prepare_1.tempDir)(false);
    const pnpmHomeDirNormalized = path_1.win32.normalize(pnpmHomeDir);
    const report = yield (0, path_extender_windows_1.addDirToWindowsEnvPath)(pnpmHomeDir, {
        proxyVarName: 'PNPM_HOME',
        overwriteProxyVar: true,
    });
    expect(report).toStrictEqual([
        {
            variable: 'PNPM_HOME',
            action: 'updated',
            oldValue: '.pnpm\\home',
            newValue: pnpmHomeDirNormalized,
        },
        {
            variable: 'Path',
            action: 'updated',
            oldValue: '%USERPROFILE%\\AppData\\Local\\Microsoft\\WindowsApps;%USERPROFILE%\\.config\\etc;.pnpm\\home;C:\\Windows;',
            newValue: '%PNPM_HOME%;%USERPROFILE%\\AppData\\Local\\Microsoft\\WindowsApps;%USERPROFILE%\\.config\\etc;.pnpm\\home;C:\\Windows;',
        },
    ]);
    expect(safe_execa_1.default).toHaveBeenNthCalledWith(3, 'reg', ['query', regKey], { windowsHide: false });
    expect(safe_execa_1.default).toHaveBeenNthCalledWith(4, 'reg', ['add', regKey, '/v', 'PNPM_HOME', '/t', 'REG_SZ', '/d', pnpmHomeDirNormalized, '/f'], { windowsHide: false });
}));
test('failure to install', () => __awaiter(void 0, void 0, void 0, function* () {
    const currentPathInRegistry = '%USERPROFILE%\\AppData\\Local\\Microsoft\\WindowsApps;%USERPROFILE%\\.config\\etc;';
    safe_execa_1.default['mockResolvedValueOnce']({
        failed: false,
        stdout: '活动代码页: 936',
    }).mockResolvedValueOnce({
        failed: false,
        stdout: '',
    }).mockResolvedValueOnce({
        failed: false,
        stdout: `
HKEY_CURRENT_USER\\Environment
    Path    REG_EXPAND_SZ    ${currentPathInRegistry}
`,
    }).mockRejectedValue(new Error());
    const pnpmHomeDir = (0, prepare_1.tempDir)(false);
    yield expect((0, path_extender_windows_1.addDirToWindowsEnvPath)(pnpmHomeDir)).rejects.toThrow();
}));
//# sourceMappingURL=path-extender-windows.spec.js.map