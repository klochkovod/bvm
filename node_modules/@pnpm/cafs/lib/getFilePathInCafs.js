"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.contentPathFromHex = exports.getFilePathInCafs = exports.getFilePathByModeInCafs = exports.modeIsExecutable = void 0;
const path_1 = __importDefault(require("path"));
const ssri_1 = __importDefault(require("ssri"));
const modeIsExecutable = (mode) => (mode & 0o111) === 0o111;
exports.modeIsExecutable = modeIsExecutable;
function getFilePathByModeInCafs(cafsDir, integrity, mode) {
    const fileType = (0, exports.modeIsExecutable)(mode) ? 'exec' : 'nonexec';
    return path_1.default.join(cafsDir, contentPathFromIntegrity(integrity, fileType));
}
exports.getFilePathByModeInCafs = getFilePathByModeInCafs;
function getFilePathInCafs(cafsDir, integrity, fileType) {
    return path_1.default.join(cafsDir, contentPathFromIntegrity(integrity, fileType));
}
exports.getFilePathInCafs = getFilePathInCafs;
function contentPathFromIntegrity(integrity, fileType) {
    const sri = ssri_1.default.parse(integrity, { single: true });
    return contentPathFromHex(fileType, sri.hexDigest());
}
function contentPathFromHex(fileType, hex) {
    const p = path_1.default.join(hex.slice(0, 2), hex.slice(2));
    switch (fileType) {
        case 'exec':
            return `${p}-exec`;
        case 'nonexec':
            return p;
        case 'index':
            return `${p}-index.json`;
    }
}
exports.contentPathFromHex = contentPathFromHex;
//# sourceMappingURL=getFilePathInCafs.js.map