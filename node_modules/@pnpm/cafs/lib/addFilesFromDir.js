"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.addFilesFromDir = void 0;
const fs_1 = require("fs");
const path_1 = __importDefault(require("path"));
const graceful_fs_1 = __importDefault(require("@pnpm/graceful-fs"));
const p_limit_1 = __importDefault(require("p-limit"));
const parseJson_1 = require("./parseJson");
const limit = (0, p_limit_1.default)(20);
const MAX_BULK_SIZE = 1 * 1024 * 1024; // 1MB
async function addFilesFromDir(cafs, dirname, manifest) {
    const index = {};
    await _retrieveFileIntegrities(cafs, dirname, dirname, index, manifest);
    if (manifest && !index['package.json']) {
        manifest.resolve(undefined);
    }
    return index;
}
exports.addFilesFromDir = addFilesFromDir;
async function _retrieveFileIntegrities(cafs, rootDir, currDir, index, deferredManifest) {
    try {
        const files = await fs_1.promises.readdir(currDir);
        await Promise.all(files.map(async (file) => {
            const fullPath = path_1.default.join(currDir, file);
            const stat = await fs_1.promises.stat(fullPath);
            if (stat.isDirectory()) {
                await _retrieveFileIntegrities(cafs, rootDir, fullPath, index);
                return;
            }
            if (stat.isFile()) {
                const relativePath = path_1.default.relative(rootDir, fullPath);
                const writeResult = limit(async () => {
                    if ((deferredManifest != null) && rootDir === currDir && file === 'package.json') {
                        const buffer = await graceful_fs_1.default.readFile(fullPath);
                        (0, parseJson_1.parseJsonBuffer)(buffer, deferredManifest);
                        return cafs.addBuffer(buffer, stat.mode);
                    }
                    if (stat.size < MAX_BULK_SIZE) {
                        const buffer = await graceful_fs_1.default.readFile(fullPath);
                        return cafs.addBuffer(buffer, stat.mode);
                    }
                    return cafs.addStream(graceful_fs_1.default.createReadStream(fullPath), stat.mode);
                });
                index[relativePath] = {
                    mode: stat.mode,
                    size: stat.size,
                    writeResult,
                };
            }
        }));
    }
    catch (err) { // eslint-disable-line
        if (err.code !== 'ENOENT') {
            throw err;
        }
    }
}
//# sourceMappingURL=addFilesFromDir.js.map