"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const os_1 = require("os");
const prepare_1 = require("@pnpm/prepare");
const path_extender_posix_1 = require("./path-extender-posix");
jest.mock('os', () => {
    const os = jest.requireActual('os');
    return Object.assign(Object.assign({}, os), { homedir: jest.fn() });
});
let homeDir;
let pnpmHomeDir;
beforeEach(() => {
    homeDir = (0, prepare_1.tempDir)();
    pnpmHomeDir = path_1.default.join(homeDir, '.pnpm');
    os_1.homedir.mockReturnValue(homeDir);
});
describe('Bash', () => {
    let configFile;
    beforeAll(() => {
        process.env.SHELL = '/bin/bash';
    });
    beforeEach(() => {
        configFile = path_1.default.join(homeDir, '.bashrc');
    });
    it('should append to empty shell script', () => __awaiter(void 0, void 0, void 0, function* () {
        fs_1.default.writeFileSync(configFile, '', 'utf8');
        const report = yield (0, path_extender_posix_1.addDirToPosixEnvPath)(pnpmHomeDir, {
            proxyVarName: 'PNPM_HOME',
            configSectionName: 'pnpm',
        });
        expect(report).toStrictEqual({
            configFile: {
                path: configFile,
                changeType: 'appended',
            },
            oldSettings: '',
            newSettings: `export PNPM_HOME="${pnpmHomeDir}"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac`,
        });
        const configContent = fs_1.default.readFileSync(configFile, 'utf8');
        expect(configContent).toEqual(`
# pnpm
export PNPM_HOME="${pnpmHomeDir}"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac
# pnpm end
`);
    }));
    it('should append to empty shell script without using a proxy variable', () => __awaiter(void 0, void 0, void 0, function* () {
        fs_1.default.writeFileSync(configFile, '', 'utf8');
        const report = yield (0, path_extender_posix_1.addDirToPosixEnvPath)(pnpmHomeDir, {
            configSectionName: 'pnpm',
        });
        expect(report).toStrictEqual({
            configFile: {
                path: configFile,
                changeType: 'appended',
            },
            oldSettings: '',
            newSettings: `case ":$PATH:" in
  *":${pnpmHomeDir}:"*) ;;
  *) export PATH="${pnpmHomeDir}:$PATH" ;;
esac`,
        });
        const configContent = fs_1.default.readFileSync(configFile, 'utf8');
        expect(configContent).toEqual(`
# pnpm
case ":$PATH:" in
  *":${pnpmHomeDir}:"*) ;;
  *) export PATH="${pnpmHomeDir}:$PATH" ;;
esac
# pnpm end
`);
    }));
    it('should put the new directory to the end of the PATH', () => __awaiter(void 0, void 0, void 0, function* () {
        fs_1.default.writeFileSync(configFile, '', 'utf8');
        const report = yield (0, path_extender_posix_1.addDirToPosixEnvPath)(pnpmHomeDir, {
            proxyVarName: 'PNPM_HOME',
            configSectionName: 'pnpm',
            position: 'end',
        });
        expect(report).toStrictEqual({
            configFile: {
                path: configFile,
                changeType: 'appended',
            },
            oldSettings: '',
            newSettings: `export PNPM_HOME="${pnpmHomeDir}"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PATH:$PNPM_HOME" ;;
esac`,
        });
        const configContent = fs_1.default.readFileSync(configFile, 'utf8');
        expect(configContent).toEqual(`
# pnpm
export PNPM_HOME="${pnpmHomeDir}"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PATH:$PNPM_HOME" ;;
esac
# pnpm end
`);
    }));
    it('should create a shell script', () => __awaiter(void 0, void 0, void 0, function* () {
        const report = yield (0, path_extender_posix_1.addDirToPosixEnvPath)(pnpmHomeDir, {
            proxyVarName: 'PNPM_HOME',
            configSectionName: 'pnpm',
        });
        expect(report).toStrictEqual({
            configFile: {
                path: configFile,
                changeType: 'created',
            },
            oldSettings: '',
            newSettings: `export PNPM_HOME="${pnpmHomeDir}"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac`,
        });
        const configContent = fs_1.default.readFileSync(configFile, 'utf8');
        expect(configContent).toEqual(`# pnpm
export PNPM_HOME="${pnpmHomeDir}"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac
# pnpm end
`);
    }));
    it('should make no changes to a shell script that already has the necessary configurations', () => __awaiter(void 0, void 0, void 0, function* () {
        fs_1.default.writeFileSync(configFile, `
# pnpm
export PNPM_HOME="${pnpmHomeDir}"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac
# pnpm end`, 'utf8');
        const report = yield (0, path_extender_posix_1.addDirToPosixEnvPath)(pnpmHomeDir, {
            proxyVarName: 'PNPM_HOME',
            configSectionName: 'pnpm',
        });
        expect(report).toStrictEqual({
            configFile: {
                path: configFile,
                changeType: 'skipped',
            },
            oldSettings: `export PNPM_HOME="${pnpmHomeDir}"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac`,
            newSettings: `export PNPM_HOME="${pnpmHomeDir}"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac`,
        });
        const configContent = fs_1.default.readFileSync(configFile, 'utf8');
        expect(configContent).toEqual(`
# pnpm
export PNPM_HOME="${pnpmHomeDir}"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac
# pnpm end`);
    }));
    it('should fail if the shell already has PNPM_HOME set to a different directory', () => __awaiter(void 0, void 0, void 0, function* () {
        fs_1.default.writeFileSync(configFile, `
# pnpm
export PNPM_HOME="pnpm_home"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac
# pnpm end`, 'utf8');
        yield expect((0, path_extender_posix_1.addDirToPosixEnvPath)(pnpmHomeDir, {
            proxyVarName: 'PNPM_HOME',
            configSectionName: 'pnpm',
        })).rejects.toThrowError(/The config file at/);
    }));
    it('should not fail if setup is forced', () => __awaiter(void 0, void 0, void 0, function* () {
        fs_1.default.writeFileSync(configFile, `
# pnpm
export PNPM_HOME="pnpm_home"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac
# pnpm end`, 'utf8');
        const report = yield (0, path_extender_posix_1.addDirToPosixEnvPath)(pnpmHomeDir, {
            proxyVarName: 'PNPM_HOME',
            overwrite: true,
            configSectionName: 'pnpm',
        });
        expect(report).toStrictEqual({
            configFile: {
                path: configFile,
                changeType: 'modified',
            },
            oldSettings: `export PNPM_HOME="pnpm_home"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac`,
            newSettings: `export PNPM_HOME="${pnpmHomeDir}"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac`,
        });
        const configContent = fs_1.default.readFileSync(configFile, 'utf8');
        expect(configContent).toEqual(`
# pnpm
export PNPM_HOME="${pnpmHomeDir}"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac
# pnpm end`);
    }));
});
describe('Zsh', () => {
    let configFile;
    beforeAll(() => {
        process.env.SHELL = '/bin/zsh';
        process.env.ZDOTDIR = '';
    });
    beforeEach(() => {
        configFile = path_1.default.join(homeDir, '.zshrc');
    });
    it('should append to empty shell script', () => __awaiter(void 0, void 0, void 0, function* () {
        fs_1.default.writeFileSync(configFile, '', 'utf8');
        const report = yield (0, path_extender_posix_1.addDirToPosixEnvPath)(pnpmHomeDir, {
            proxyVarName: 'PNPM_HOME',
            configSectionName: 'pnpm',
        });
        expect(report).toStrictEqual({
            configFile: {
                path: configFile,
                changeType: 'appended',
            },
            oldSettings: ``,
            newSettings: `export PNPM_HOME="${pnpmHomeDir}"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac`,
        });
        const configContent = fs_1.default.readFileSync(configFile, 'utf8');
        expect(configContent).toEqual(`
# pnpm
export PNPM_HOME="${pnpmHomeDir}"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac
# pnpm end
`);
    }));
    it('should make no changes to a shell script that already has the necessary configurations', () => __awaiter(void 0, void 0, void 0, function* () {
        fs_1.default.writeFileSync(configFile, `
# pnpm
export PNPM_HOME="${pnpmHomeDir}"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac
# pnpm end`, 'utf8');
        const report = yield (0, path_extender_posix_1.addDirToPosixEnvPath)(pnpmHomeDir, {
            proxyVarName: 'PNPM_HOME',
            configSectionName: 'pnpm',
        });
        expect(report).toStrictEqual({
            configFile: {
                path: configFile,
                changeType: 'skipped',
            },
            oldSettings: `export PNPM_HOME="${pnpmHomeDir}"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac`,
            newSettings: `export PNPM_HOME="${pnpmHomeDir}"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac`,
        });
        const configContent = fs_1.default.readFileSync(configFile, 'utf8');
        expect(configContent).toEqual(`
# pnpm
export PNPM_HOME="${pnpmHomeDir}"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac
# pnpm end`);
    }));
    it('should target config file in custom directory when ZDOTDIR is present', () => __awaiter(void 0, void 0, void 0, function* () {
        const customDir = path_1.default.join(homeDir, 'customDir');
        process.env.ZDOTDIR = customDir;
        fs_1.default.mkdirSync(customDir);
        const customConfigFile = path_1.default.join(process.env.ZDOTDIR, '.zshrc');
        fs_1.default.writeFileSync(configFile, '', 'utf8');
        fs_1.default.writeFileSync(customConfigFile, '', 'utf8');
        const report = yield (0, path_extender_posix_1.addDirToPosixEnvPath)(pnpmHomeDir, {
            proxyVarName: 'PNPM_HOME',
            configSectionName: 'pnpm',
        });
        expect(report).toStrictEqual({
            configFile: {
                path: customConfigFile,
                changeType: 'appended',
            },
            oldSettings: ``,
            newSettings: `export PNPM_HOME="${pnpmHomeDir}"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac`,
        });
        const configContent = fs_1.default.readFileSync(configFile, 'utf8');
        const customConfigContent = fs_1.default.readFileSync(customConfigFile, 'utf8');
        expect(configContent).toEqual(``);
        expect(customConfigContent).toEqual(`
# pnpm
export PNPM_HOME="${pnpmHomeDir}"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac
# pnpm end
`);
        process.env.ZDOTDIR = '';
    }));
});
describe('ksh', () => {
    let configFile;
    beforeAll(() => {
        process.env.SHELL = '/bin/ksh';
    });
    beforeEach(() => {
        configFile = path_1.default.join(homeDir, '.kshrc');
    });
    it('should append to empty shell script', () => __awaiter(void 0, void 0, void 0, function* () {
        fs_1.default.writeFileSync(configFile, '', 'utf8');
        const report = yield (0, path_extender_posix_1.addDirToPosixEnvPath)(pnpmHomeDir, {
            proxyVarName: 'PNPM_HOME',
            configSectionName: 'pnpm',
        });
        expect(report).toStrictEqual({
            configFile: {
                path: configFile,
                changeType: 'appended',
            },
            oldSettings: '',
            newSettings: `export PNPM_HOME="${pnpmHomeDir}"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac`,
        });
        const configContent = fs_1.default.readFileSync(configFile, 'utf8');
        expect(configContent).toEqual(`
# pnpm
export PNPM_HOME="${pnpmHomeDir}"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac
# pnpm end
`);
    }));
    it('should put the new directory to the end of the PATH', () => __awaiter(void 0, void 0, void 0, function* () {
        fs_1.default.writeFileSync(configFile, '', 'utf8');
        const report = yield (0, path_extender_posix_1.addDirToPosixEnvPath)(pnpmHomeDir, {
            proxyVarName: 'PNPM_HOME',
            configSectionName: 'pnpm',
            position: 'end',
        });
        expect(report).toStrictEqual({
            configFile: {
                path: configFile,
                changeType: 'appended',
            },
            oldSettings: '',
            newSettings: `export PNPM_HOME="${pnpmHomeDir}"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PATH:$PNPM_HOME" ;;
esac`,
        });
        const configContent = fs_1.default.readFileSync(configFile, 'utf8');
        expect(configContent).toEqual(`
# pnpm
export PNPM_HOME="${pnpmHomeDir}"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PATH:$PNPM_HOME" ;;
esac
# pnpm end
`);
    }));
    it('should create a shell script', () => __awaiter(void 0, void 0, void 0, function* () {
        const report = yield (0, path_extender_posix_1.addDirToPosixEnvPath)(pnpmHomeDir, {
            proxyVarName: 'PNPM_HOME',
            configSectionName: 'pnpm',
        });
        expect(report).toStrictEqual({
            configFile: {
                path: configFile,
                changeType: 'created',
            },
            oldSettings: '',
            newSettings: `export PNPM_HOME="${pnpmHomeDir}"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac`,
        });
        const configContent = fs_1.default.readFileSync(configFile, 'utf8');
        expect(configContent).toEqual(`# pnpm
export PNPM_HOME="${pnpmHomeDir}"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac
# pnpm end
`);
    }));
    it('should make no changes to a shell script that already has the necessary configurations', () => __awaiter(void 0, void 0, void 0, function* () {
        fs_1.default.writeFileSync(configFile, `
# pnpm
export PNPM_HOME="${pnpmHomeDir}"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac
# pnpm end`, 'utf8');
        const report = yield (0, path_extender_posix_1.addDirToPosixEnvPath)(pnpmHomeDir, {
            proxyVarName: 'PNPM_HOME',
            configSectionName: 'pnpm',
        });
        expect(report).toStrictEqual({
            configFile: {
                path: configFile,
                changeType: 'skipped',
            },
            oldSettings: `export PNPM_HOME="${pnpmHomeDir}"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac`,
            newSettings: `export PNPM_HOME="${pnpmHomeDir}"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac`,
        });
        const configContent = fs_1.default.readFileSync(configFile, 'utf8');
        expect(configContent).toEqual(`
# pnpm
export PNPM_HOME="${pnpmHomeDir}"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac
# pnpm end`);
    }));
    it('should fail if the shell already has PNPM_HOME set to a different directory', () => __awaiter(void 0, void 0, void 0, function* () {
        fs_1.default.writeFileSync(configFile, `
# pnpm
export PNPM_HOME="pnpm_home"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac
# pnpm end`, 'utf8');
        yield expect((0, path_extender_posix_1.addDirToPosixEnvPath)(pnpmHomeDir, {
            proxyVarName: 'PNPM_HOME',
            configSectionName: 'pnpm',
        })).rejects.toThrowError(/The config file at/);
    }));
    it('should not fail if setup is forced', () => __awaiter(void 0, void 0, void 0, function* () {
        fs_1.default.writeFileSync(configFile, `
# pnpm
export PNPM_HOME="pnpm_home"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac
# pnpm end`, 'utf8');
        const report = yield (0, path_extender_posix_1.addDirToPosixEnvPath)(pnpmHomeDir, {
            proxyVarName: 'PNPM_HOME',
            overwrite: true,
            configSectionName: 'pnpm',
        });
        expect(report).toStrictEqual({
            configFile: {
                path: configFile,
                changeType: 'modified',
            },
            oldSettings: `export PNPM_HOME="pnpm_home"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac`,
            newSettings: `export PNPM_HOME="${pnpmHomeDir}"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac`,
        });
        const configContent = fs_1.default.readFileSync(configFile, 'utf8');
        expect(configContent).toEqual(`
# pnpm
export PNPM_HOME="${pnpmHomeDir}"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac
# pnpm end`);
    }));
});
describe('Dash', () => {
    let configFile;
    beforeAll(() => {
        process.env.SHELL = '/bin/dash';
    });
    beforeEach(() => {
        configFile = path_1.default.join(homeDir, '.dashrc');
        process.env.ENV = configFile;
    });
    it('should fail if there is no ENV env variable', () => __awaiter(void 0, void 0, void 0, function* () {
        delete process.env.ENV;
        yield expect((0, path_extender_posix_1.addDirToPosixEnvPath)(pnpmHomeDir, {
            proxyVarName: 'PNPM_HOME',
            configSectionName: 'pnpm',
        })).rejects.toThrowError(/The ENV environment variable is not set/);
    }));
    it('should append to empty shell script', () => __awaiter(void 0, void 0, void 0, function* () {
        fs_1.default.writeFileSync(configFile, '', 'utf8');
        const report = yield (0, path_extender_posix_1.addDirToPosixEnvPath)(pnpmHomeDir, {
            proxyVarName: 'PNPM_HOME',
            configSectionName: 'pnpm',
        });
        expect(report).toStrictEqual({
            configFile: {
                path: configFile,
                changeType: 'appended',
            },
            oldSettings: '',
            newSettings: `export PNPM_HOME="${pnpmHomeDir}"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac`,
        });
        const configContent = fs_1.default.readFileSync(configFile, 'utf8');
        expect(configContent).toEqual(`
# pnpm
export PNPM_HOME="${pnpmHomeDir}"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac
# pnpm end
`);
    }));
    it('should put the new directory to the end of the PATH', () => __awaiter(void 0, void 0, void 0, function* () {
        fs_1.default.writeFileSync(configFile, '', 'utf8');
        const report = yield (0, path_extender_posix_1.addDirToPosixEnvPath)(pnpmHomeDir, {
            proxyVarName: 'PNPM_HOME',
            configSectionName: 'pnpm',
            position: 'end',
        });
        expect(report).toStrictEqual({
            configFile: {
                path: configFile,
                changeType: 'appended',
            },
            oldSettings: '',
            newSettings: `export PNPM_HOME="${pnpmHomeDir}"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PATH:$PNPM_HOME" ;;
esac`,
        });
        const configContent = fs_1.default.readFileSync(configFile, 'utf8');
        expect(configContent).toEqual(`
# pnpm
export PNPM_HOME="${pnpmHomeDir}"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PATH:$PNPM_HOME" ;;
esac
# pnpm end
`);
    }));
    it('should create a shell script', () => __awaiter(void 0, void 0, void 0, function* () {
        const report = yield (0, path_extender_posix_1.addDirToPosixEnvPath)(pnpmHomeDir, {
            proxyVarName: 'PNPM_HOME',
            configSectionName: 'pnpm',
        });
        expect(report).toStrictEqual({
            configFile: {
                path: configFile,
                changeType: 'created',
            },
            oldSettings: '',
            newSettings: `export PNPM_HOME="${pnpmHomeDir}"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac`,
        });
        const configContent = fs_1.default.readFileSync(configFile, 'utf8');
        expect(configContent).toEqual(`# pnpm
export PNPM_HOME="${pnpmHomeDir}"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac
# pnpm end
`);
    }));
    it('should make no changes to a shell script that already has the necessary configurations', () => __awaiter(void 0, void 0, void 0, function* () {
        fs_1.default.writeFileSync(configFile, `
# pnpm
export PNPM_HOME="${pnpmHomeDir}"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac
# pnpm end`, 'utf8');
        const report = yield (0, path_extender_posix_1.addDirToPosixEnvPath)(pnpmHomeDir, {
            proxyVarName: 'PNPM_HOME',
            configSectionName: 'pnpm',
        });
        expect(report).toStrictEqual({
            configFile: {
                path: configFile,
                changeType: 'skipped',
            },
            oldSettings: `export PNPM_HOME="${pnpmHomeDir}"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac`,
            newSettings: `export PNPM_HOME="${pnpmHomeDir}"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac`,
        });
        const configContent = fs_1.default.readFileSync(configFile, 'utf8');
        expect(configContent).toEqual(`
# pnpm
export PNPM_HOME="${pnpmHomeDir}"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac
# pnpm end`);
    }));
    it('should fail if the shell already has PNPM_HOME set to a different directory', () => __awaiter(void 0, void 0, void 0, function* () {
        fs_1.default.writeFileSync(configFile, `
# pnpm
export PNPM_HOME="pnpm_home"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac
# pnpm end`, 'utf8');
        yield expect((0, path_extender_posix_1.addDirToPosixEnvPath)(pnpmHomeDir, {
            proxyVarName: 'PNPM_HOME',
            configSectionName: 'pnpm',
        })).rejects.toThrowError(/The config file at/);
    }));
    it('should not fail if setup is forced', () => __awaiter(void 0, void 0, void 0, function* () {
        fs_1.default.writeFileSync(configFile, `
# pnpm
export PNPM_HOME="pnpm_home"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac
# pnpm end`, 'utf8');
        const report = yield (0, path_extender_posix_1.addDirToPosixEnvPath)(pnpmHomeDir, {
            proxyVarName: 'PNPM_HOME',
            overwrite: true,
            configSectionName: 'pnpm',
        });
        expect(report).toStrictEqual({
            configFile: {
                path: configFile,
                changeType: 'modified',
            },
            oldSettings: `export PNPM_HOME="pnpm_home"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac`,
            newSettings: `export PNPM_HOME="${pnpmHomeDir}"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac`,
        });
        const configContent = fs_1.default.readFileSync(configFile, 'utf8');
        expect(configContent).toEqual(`
# pnpm
export PNPM_HOME="${pnpmHomeDir}"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac
# pnpm end`);
    }));
});
describe('sh', () => {
    let configFile;
    beforeAll(() => {
        process.env.SHELL = '/bin/sh';
    });
    beforeEach(() => {
        configFile = path_1.default.join(homeDir, '.shrc');
        process.env.ENV = configFile;
    });
    it('should fail if there is no ENV env variable', () => __awaiter(void 0, void 0, void 0, function* () {
        delete process.env.ENV;
        yield expect((0, path_extender_posix_1.addDirToPosixEnvPath)(pnpmHomeDir, {
            proxyVarName: 'PNPM_HOME',
            configSectionName: 'pnpm',
        })).rejects.toThrowError(/The ENV environment variable is not set/);
    }));
    it('should append to empty shell script', () => __awaiter(void 0, void 0, void 0, function* () {
        fs_1.default.writeFileSync(configFile, '', 'utf8');
        const report = yield (0, path_extender_posix_1.addDirToPosixEnvPath)(pnpmHomeDir, {
            proxyVarName: 'PNPM_HOME',
            configSectionName: 'pnpm',
        });
        expect(report).toStrictEqual({
            configFile: {
                path: configFile,
                changeType: 'appended',
            },
            oldSettings: '',
            newSettings: `export PNPM_HOME="${pnpmHomeDir}"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac`,
        });
        const configContent = fs_1.default.readFileSync(configFile, 'utf8');
        expect(configContent).toEqual(`
# pnpm
export PNPM_HOME="${pnpmHomeDir}"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac
# pnpm end
`);
    }));
    it('should put the new directory to the end of the PATH', () => __awaiter(void 0, void 0, void 0, function* () {
        fs_1.default.writeFileSync(configFile, '', 'utf8');
        const report = yield (0, path_extender_posix_1.addDirToPosixEnvPath)(pnpmHomeDir, {
            proxyVarName: 'PNPM_HOME',
            configSectionName: 'pnpm',
            position: 'end',
        });
        expect(report).toStrictEqual({
            configFile: {
                path: configFile,
                changeType: 'appended',
            },
            oldSettings: '',
            newSettings: `export PNPM_HOME="${pnpmHomeDir}"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PATH:$PNPM_HOME" ;;
esac`,
        });
        const configContent = fs_1.default.readFileSync(configFile, 'utf8');
        expect(configContent).toEqual(`
# pnpm
export PNPM_HOME="${pnpmHomeDir}"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PATH:$PNPM_HOME" ;;
esac
# pnpm end
`);
    }));
    it('should create a shell script', () => __awaiter(void 0, void 0, void 0, function* () {
        const report = yield (0, path_extender_posix_1.addDirToPosixEnvPath)(pnpmHomeDir, {
            proxyVarName: 'PNPM_HOME',
            configSectionName: 'pnpm',
        });
        expect(report).toStrictEqual({
            configFile: {
                path: configFile,
                changeType: 'created',
            },
            oldSettings: '',
            newSettings: `export PNPM_HOME="${pnpmHomeDir}"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac`,
        });
        const configContent = fs_1.default.readFileSync(configFile, 'utf8');
        expect(configContent).toEqual(`# pnpm
export PNPM_HOME="${pnpmHomeDir}"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac
# pnpm end
`);
    }));
    it('should make no changes to a shell script that already has the necessary configurations', () => __awaiter(void 0, void 0, void 0, function* () {
        fs_1.default.writeFileSync(configFile, `
# pnpm
export PNPM_HOME="${pnpmHomeDir}"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac
# pnpm end`, 'utf8');
        const report = yield (0, path_extender_posix_1.addDirToPosixEnvPath)(pnpmHomeDir, {
            proxyVarName: 'PNPM_HOME',
            configSectionName: 'pnpm',
        });
        expect(report).toStrictEqual({
            configFile: {
                path: configFile,
                changeType: 'skipped',
            },
            oldSettings: `export PNPM_HOME="${pnpmHomeDir}"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac`,
            newSettings: `export PNPM_HOME="${pnpmHomeDir}"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac`,
        });
        const configContent = fs_1.default.readFileSync(configFile, 'utf8');
        expect(configContent).toEqual(`
# pnpm
export PNPM_HOME="${pnpmHomeDir}"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac
# pnpm end`);
    }));
    it('should fail if the shell already has PNPM_HOME set to a different directory', () => __awaiter(void 0, void 0, void 0, function* () {
        fs_1.default.writeFileSync(configFile, `
# pnpm
export PNPM_HOME="pnpm_home"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac
# pnpm end`, 'utf8');
        yield expect((0, path_extender_posix_1.addDirToPosixEnvPath)(pnpmHomeDir, {
            proxyVarName: 'PNPM_HOME',
            configSectionName: 'pnpm',
        })).rejects.toThrowError(/The config file at/);
    }));
    it('should not fail if setup is forced', () => __awaiter(void 0, void 0, void 0, function* () {
        fs_1.default.writeFileSync(configFile, `
# pnpm
export PNPM_HOME="pnpm_home"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac
# pnpm end`, 'utf8');
        const report = yield (0, path_extender_posix_1.addDirToPosixEnvPath)(pnpmHomeDir, {
            proxyVarName: 'PNPM_HOME',
            overwrite: true,
            configSectionName: 'pnpm',
        });
        expect(report).toStrictEqual({
            configFile: {
                path: configFile,
                changeType: 'modified',
            },
            oldSettings: `export PNPM_HOME="pnpm_home"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac`,
            newSettings: `export PNPM_HOME="${pnpmHomeDir}"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac`,
        });
        const configContent = fs_1.default.readFileSync(configFile, 'utf8');
        expect(configContent).toEqual(`
# pnpm
export PNPM_HOME="${pnpmHomeDir}"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac
# pnpm end`);
    }));
});
describe('Fish', () => {
    let configFile;
    beforeAll(() => {
        process.env.SHELL = '/bin/fish';
    });
    beforeEach(() => {
        configFile = path_1.default.join(homeDir, '.config/fish/config.fish');
    });
    it('should append to empty shell script', () => __awaiter(void 0, void 0, void 0, function* () {
        fs_1.default.mkdirSync('.config/fish', { recursive: true });
        fs_1.default.writeFileSync(configFile, '', 'utf8');
        const report = yield (0, path_extender_posix_1.addDirToPosixEnvPath)(pnpmHomeDir, {
            proxyVarName: 'PNPM_HOME',
            configSectionName: 'pnpm',
        });
        expect(report).toStrictEqual({
            configFile: {
                path: configFile,
                changeType: 'appended',
            },
            oldSettings: ``,
            newSettings: `set -gx PNPM_HOME "${pnpmHomeDir}"
if not string match -q -- $PNPM_HOME $PATH
  set -gx PATH "$PNPM_HOME" $PATH
end`,
        });
        const configContent = fs_1.default.readFileSync(configFile, 'utf8');
        expect(configContent).toEqual(`
# pnpm
set -gx PNPM_HOME "${pnpmHomeDir}"
if not string match -q -- $PNPM_HOME $PATH
  set -gx PATH "$PNPM_HOME" $PATH
end
# pnpm end
`);
    }));
    it('should append to empty shell script without using a proxy varialbe', () => __awaiter(void 0, void 0, void 0, function* () {
        fs_1.default.mkdirSync('.config/fish', { recursive: true });
        fs_1.default.writeFileSync(configFile, '', 'utf8');
        const report = yield (0, path_extender_posix_1.addDirToPosixEnvPath)(pnpmHomeDir, {
            configSectionName: 'pnpm',
        });
        expect(report).toStrictEqual({
            configFile: {
                path: configFile,
                changeType: 'appended',
            },
            oldSettings: ``,
            newSettings: `if not string match -q -- "${pnpmHomeDir}" $PATH
  set -gx PATH "${pnpmHomeDir}" $PATH
end`,
        });
        const configContent = fs_1.default.readFileSync(configFile, 'utf8');
        expect(configContent).toEqual(`
# pnpm
if not string match -q -- "${pnpmHomeDir}" $PATH
  set -gx PATH "${pnpmHomeDir}" $PATH
end
# pnpm end
`);
    }));
    it('should add the new dir to the end of PATH', () => __awaiter(void 0, void 0, void 0, function* () {
        fs_1.default.mkdirSync('.config/fish', { recursive: true });
        fs_1.default.writeFileSync(configFile, '', 'utf8');
        const report = yield (0, path_extender_posix_1.addDirToPosixEnvPath)(pnpmHomeDir, {
            proxyVarName: 'PNPM_HOME',
            configSectionName: 'pnpm',
            position: 'end',
        });
        expect(report).toStrictEqual({
            configFile: {
                path: configFile,
                changeType: 'appended',
            },
            oldSettings: ``,
            newSettings: `set -gx PNPM_HOME "${pnpmHomeDir}"
if not string match -q -- $PNPM_HOME $PATH
  set -gx PATH $PATH "$PNPM_HOME"
end`,
        });
        const configContent = fs_1.default.readFileSync(configFile, 'utf8');
        expect(configContent).toEqual(`
# pnpm
set -gx PNPM_HOME "${pnpmHomeDir}"
if not string match -q -- $PNPM_HOME $PATH
  set -gx PATH $PATH "$PNPM_HOME"
end
# pnpm end
`);
    }));
    it('should create a shell script', () => __awaiter(void 0, void 0, void 0, function* () {
        const report = yield (0, path_extender_posix_1.addDirToPosixEnvPath)(pnpmHomeDir, {
            proxyVarName: 'PNPM_HOME',
            configSectionName: 'pnpm',
        });
        expect(report).toStrictEqual({
            configFile: {
                path: configFile,
                changeType: 'created',
            },
            oldSettings: ``,
            newSettings: `set -gx PNPM_HOME "${pnpmHomeDir}"
if not string match -q -- $PNPM_HOME $PATH
  set -gx PATH "$PNPM_HOME" $PATH
end`
        });
        const configContent = fs_1.default.readFileSync(configFile, 'utf8');
        expect(configContent).toEqual(`# pnpm
set -gx PNPM_HOME "${pnpmHomeDir}"
if not string match -q -- $PNPM_HOME $PATH
  set -gx PATH "$PNPM_HOME" $PATH
end
# pnpm end
`);
    }));
    it('should make no changes to a shell script that already has the necessary configurations', () => __awaiter(void 0, void 0, void 0, function* () {
        fs_1.default.mkdirSync('.config/fish', { recursive: true });
        fs_1.default.writeFileSync(configFile, `
# pnpm
set -gx PNPM_HOME "${pnpmHomeDir}"
if not string match -q -- $PNPM_HOME $PATH
  set -gx PATH "$PNPM_HOME" $PATH
end
# pnpm end`, 'utf8');
        const report = yield (0, path_extender_posix_1.addDirToPosixEnvPath)(pnpmHomeDir, {
            proxyVarName: 'PNPM_HOME',
            configSectionName: 'pnpm',
        });
        expect(report).toStrictEqual({
            configFile: {
                path: configFile,
                changeType: 'skipped',
            },
            oldSettings: `set -gx PNPM_HOME "${pnpmHomeDir}"
if not string match -q -- $PNPM_HOME $PATH
  set -gx PATH "$PNPM_HOME" $PATH
end`,
            newSettings: `set -gx PNPM_HOME "${pnpmHomeDir}"
if not string match -q -- $PNPM_HOME $PATH
  set -gx PATH "$PNPM_HOME" $PATH
end`
        });
        const configContent = fs_1.default.readFileSync(configFile, 'utf8');
        expect(configContent).toEqual(`
# pnpm
set -gx PNPM_HOME "${pnpmHomeDir}"
if not string match -q -- $PNPM_HOME $PATH
  set -gx PATH "$PNPM_HOME" $PATH
end
# pnpm end`);
    }));
    it('should fail if the shell already has PNPM_HOME set to a different directory', () => __awaiter(void 0, void 0, void 0, function* () {
        fs_1.default.mkdirSync('.config/fish', { recursive: true });
        fs_1.default.writeFileSync(configFile, `
# pnpm
set -gx PNPM_HOME "pnpm_home"
set -gx PATH "$PNPM_HOME" $PATH
# pnpm end`, 'utf8');
        yield expect((0, path_extender_posix_1.addDirToPosixEnvPath)(pnpmHomeDir, {
            proxyVarName: 'PNPM_HOME',
            configSectionName: 'pnpm',
        })).rejects.toThrowError(/The config file at/);
    }));
    it('should not fail if setup is forced', () => __awaiter(void 0, void 0, void 0, function* () {
        fs_1.default.mkdirSync('.config/fish', { recursive: true });
        fs_1.default.writeFileSync(configFile, `
# pnpm
set -gx PNPM_HOME "pnpm_home"
if not string match -q -- $PNPM_HOME $PATH
  set -gx PATH "$PNPM_HOME" $PATH
end
# pnpm end`, 'utf8');
        const report = yield (0, path_extender_posix_1.addDirToPosixEnvPath)(pnpmHomeDir, {
            proxyVarName: 'PNPM_HOME',
            overwrite: true,
            configSectionName: 'pnpm',
        });
        expect(report).toStrictEqual({
            configFile: {
                path: configFile,
                changeType: 'modified',
            },
            oldSettings: `set -gx PNPM_HOME "pnpm_home"
if not string match -q -- $PNPM_HOME $PATH
  set -gx PATH "$PNPM_HOME" $PATH
end`,
            newSettings: `set -gx PNPM_HOME "${pnpmHomeDir}"
if not string match -q -- $PNPM_HOME $PATH
  set -gx PATH "$PNPM_HOME" $PATH
end`
        });
        const configContent = fs_1.default.readFileSync(configFile, 'utf8');
        expect(configContent).toEqual(`
# pnpm
set -gx PNPM_HOME "${pnpmHomeDir}"
if not string match -q -- $PNPM_HOME $PATH
  set -gx PATH "$PNPM_HOME" $PATH
end
# pnpm end`);
    }));
});
//# sourceMappingURL=path-extender-posix.spec.js.map