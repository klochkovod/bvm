"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.preparePackage = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const lifecycle_1 = require("@pnpm/lifecycle");
const read_package_json_1 = require("@pnpm/read-package-json");
const rimraf_1 = __importDefault(require("@zkochan/rimraf"));
const preferred_pm_1 = __importDefault(require("preferred-pm"));
const omit_1 = __importDefault(require("ramda/src/omit"));
const PREPUBLISH_SCRIPTS = [
    'prepublish',
    'prepublishOnly',
    'prepack',
    'publish',
    'postpublish',
];
async function preparePackage(opts, pkgDir) {
    const manifest = await (0, read_package_json_1.safeReadPackageJsonFromDir)(pkgDir);
    if (manifest?.scripts == null || !packageShouldBeBuilt(manifest, pkgDir))
        return false;
    if (opts.ignoreScripts)
        return true;
    const pm = (await (0, preferred_pm_1.default)(pkgDir))?.name ?? 'npm';
    const execOpts = {
        depPath: `${manifest.name}@${manifest.version}`,
        pkgRoot: pkgDir,
        // We can't prepare a package without running its lifecycle scripts.
        // An alternative solution could be to throw an exception.
        rawConfig: (0, omit_1.default)(['ignore-scripts'], opts.rawConfig),
        rootModulesDir: pkgDir,
        unsafePerm: Boolean(opts.unsafePerm),
    };
    try {
        const installScriptName = `${pm}-install`;
        manifest.scripts[installScriptName] = `${pm} install`;
        await (0, lifecycle_1.runLifecycleHook)(installScriptName, manifest, execOpts);
        for (const scriptName of PREPUBLISH_SCRIPTS) {
            if (manifest.scripts[scriptName] == null || manifest.scripts[scriptName] === '')
                continue;
            await (0, lifecycle_1.runLifecycleHook)(scriptName, manifest, execOpts);
        }
    }
    catch (err) { // eslint-disable-line
        err.code = 'ERR_PNPM_PREPARE_PACKAGE';
        throw err;
    }
    await (0, rimraf_1.default)(path_1.default.join(pkgDir, 'node_modules'));
    return true;
}
exports.preparePackage = preparePackage;
function packageShouldBeBuilt(manifest, pkgDir) {
    if (manifest.scripts == null)
        return false;
    const scripts = manifest.scripts;
    if (scripts.prepare != null && scripts.prepare !== '')
        return true;
    const hasPrepublishScript = PREPUBLISH_SCRIPTS.some((scriptName) => scripts[scriptName] != null && scripts[scriptName] !== '');
    if (!hasPrepublishScript)
        return false;
    const mainFile = manifest.main ?? 'index.js';
    return !fs_1.default.existsSync(path_1.default.join(pkgDir, mainFile));
}
//# sourceMappingURL=index.js.map