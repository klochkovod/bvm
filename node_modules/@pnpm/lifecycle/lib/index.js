"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.runPostinstallHooks = exports.runLifecycleHooksConcurrently = exports.runLifecycleHook = exports.makeNodeRequireOption = void 0;
const path_1 = __importDefault(require("path"));
const read_package_json_1 = require("@pnpm/read-package-json");
const path_exists_1 = __importDefault(require("path-exists"));
const runLifecycleHook_1 = require("./runLifecycleHook");
Object.defineProperty(exports, "runLifecycleHook", { enumerable: true, get: function () { return runLifecycleHook_1.runLifecycleHook; } });
const runLifecycleHooksConcurrently_1 = require("./runLifecycleHooksConcurrently");
Object.defineProperty(exports, "runLifecycleHooksConcurrently", { enumerable: true, get: function () { return runLifecycleHooksConcurrently_1.runLifecycleHooksConcurrently; } });
function makeNodeRequireOption(modulePath) {
    let { NODE_OPTIONS } = process.env;
    NODE_OPTIONS = `${NODE_OPTIONS ?? ''} --require=${modulePath}`.trim();
    return { NODE_OPTIONS };
}
exports.makeNodeRequireOption = makeNodeRequireOption;
async function runPostinstallHooks(opts) {
    const pkg = await (0, read_package_json_1.safeReadPackageJsonFromDir)(opts.pkgRoot);
    if (pkg == null)
        return false;
    if (pkg.scripts == null) {
        pkg.scripts = {};
    }
    if (!pkg.scripts.install) {
        await checkBindingGyp(opts.pkgRoot, pkg.scripts);
    }
    if (pkg.scripts.preinstall) {
        await (0, runLifecycleHook_1.runLifecycleHook)('preinstall', pkg, opts);
    }
    if (pkg.scripts.install) {
        await (0, runLifecycleHook_1.runLifecycleHook)('install', pkg, opts);
    }
    if (pkg.scripts.postinstall) {
        await (0, runLifecycleHook_1.runLifecycleHook)('postinstall', pkg, opts);
    }
    return pkg.scripts.preinstall != null ||
        pkg.scripts.install != null ||
        pkg.scripts.postinstall != null;
}
exports.runPostinstallHooks = runPostinstallHooks;
/**
 * Run node-gyp when binding.gyp is available. Only do this when there's no
 * `install` script (see `npm help scripts`).
 */
async function checkBindingGyp(root, scripts) {
    if (await (0, path_exists_1.default)(path_1.default.join(root, 'binding.gyp'))) {
        scripts.install = 'node-gyp rebuild';
    }
}
//# sourceMappingURL=index.js.map