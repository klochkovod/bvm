"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GcpStorage = void 0;
const node_fetch_1 = __importDefault(require("node-fetch"));
const toolbox_network_agent_1 = require("@teambit/toolbox.network.agent");
const minio_1 = require("minio");
class GcpStorage {
    constructor(bucketName, proxyConfig, storageAPI = 'storage.googleapis.com', accessKey, secretKey) {
        this.bucketName = bucketName;
        this.proxyConfig = proxyConfig;
        this.storageAPI = storageAPI;
        this.accessKey = accessKey;
        this.secretKey = secretKey;
    }
    getMinioClient() {
        if (this.minioClient)
            return this.minioClient;
        if (!this.accessKey || !this.secretKey) {
            throw new Error('accessKey and secretKey are required for GCP storage');
        }
        this.minioClient = new minio_1.Client({
            endPoint: this.storageAPI,
            accessKey: this.accessKey,
            secretKey: this.secretKey,
        });
        return this.minioClient;
    }
    getStorageAPIUrl() {
        if (!this.storageAPI.startsWith('https:')) {
            return `https://${this.storageAPI}`;
        }
        return this.storageAPI;
    }
    getFiles(opts) {
        return __awaiter(this, void 0, void 0, function* () {
            const agent = (0, toolbox_network_agent_1.getAgent)(this.getStorageAPIUrl(), this.proxyConfig || {});
            const res = yield (0, node_fetch_1.default)(`${this.getStorageAPIUrl()}/storage/v1/b/${this.bucketName}/o?prefix=${opts.prefix}`, {
                agent,
            });
            const json = yield res.json();
            return json.items;
        });
    }
    putFile(objectName, content, metadata = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const size = content.length;
            const minioClient = this.getMinioClient();
            const res = yield minioClient.putObject(this.bucketName, objectName, content, size, metadata);
            return res;
        });
    }
    static create(bucketName, proxyConfig, accessKey, secretKey) {
        return new GcpStorage(bucketName, proxyConfig, undefined, accessKey, secretKey);
    }
}
exports.GcpStorage = GcpStorage;
//# sourceMappingURL=storage.js.map