"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.command = exports.InstallCmd = void 0;
const util_1 = __importDefault(require("util"));
const bvm_install_1 = require("@teambit/bvm.install");
const toolbox_time_time_format_1 = require("@teambit/toolbox.time.time-format");
const bvm_reporter_1 = require("@teambit/bvm.reporter");
const bvm_version_1 = require("@teambit/bvm.version");
const chalk_1 = __importDefault(require("chalk"));
class InstallCmd {
    constructor() {
        this.aliases = ['i', 'install'];
        this.describe = 'install specific bit version';
        this.command = [
            'install [bit-version]'
        ];
    }
    builder(yargs) {
        yargs.positional('bit-version', {
            describe: 'version to install',
            default: 'latest',
            type: 'string'
        })
            .option({
            'skip-update-path': {
                describe: "don't add the bvm directory to the system PATH",
                default: false,
                type: 'boolean',
            }
        })
            .option({
            override: {
                describe: 'download the version again even if it is already exist in file system',
                default: false,
                type: 'boolean'
            }
        })
            .option({
            file: {
                alias: ['f'],
                describe: 'install a version from a path to a file',
                type: 'string'
            }
        })
            .option({
            replace: {
                describe: 'replace current version',
                default: true,
                type: 'boolean'
            }
        })
            .option({
            'extract-method': {
                describe: 'EXPERIMENTAL. change the extraction method',
                type: 'string',
                choices: ['default', 'child-process'],
            }
        })
            .option({
            'use-system-node': {
                describe: "use the Node.js installed on the system to run Bit CLI",
                default: false,
                type: 'boolean'
            }
        })
            .option({
            'skip-update-check': {
                describe: "skip checking for a newer version of BVM",
                default: false,
                type: 'boolean'
            }
        })
            .option({
            os: {
                describe: 'override the os type',
                type: 'string',
                choices: ['linux', 'darwin', 'win'],
            },
            arch: {
                describe: 'override the arch type',
                type: 'string',
                choices: ['x64', 'arm64'],
            },
        })
            .example('$0 install 0.0.200', 'install version 0.0.200 of bit')
            .example('$0 install -f "/tmp/bit-0.0.740.tar.gz"', 'install version 0.0.740 of bit from a tar file');
        return yargs;
    }
    handler(args) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (!args.skipUpdateCheck) {
                    const currentBvmVersion = yield (0, bvm_version_1.getBvmLocalVersion)();
                    const latestBvmRemoteVersion = yield (0, bvm_version_1.getBvmRemoteVersion)();
                    const upgradeBvmMsg = (0, bvm_version_1.getNewerBvmAvailableOutput)(currentBvmVersion, latestBvmRemoteVersion);
                    if (upgradeBvmMsg) {
                        console.log(chalk_1.default.yellow(upgradeBvmMsg));
                    }
                }
                const opts = {
                    addToPathIfMissing: !args.skipUpdatePath,
                    override: args.override,
                    replace: args.replace,
                    extractMethod: args.extractMethod,
                    file: args.file,
                    useSystemNode: args.useSystemNode,
                    os: args.os,
                    arch: args.arch,
                };
                const installStartTime = Date.now();
                const { versionPath, installedVersion, pathExtenderReport, warnings } = yield (0, bvm_install_1.installVersion)(args.bitVersion, opts);
                const installEndTime = Date.now();
                const installTimeDiff = (0, toolbox_time_time_format_1.timeFormat)(installEndTime - installStartTime);
                console.log(`version ${chalk_1.default.green(installedVersion)} installed on ${chalk_1.default.green(versionPath)} in ${chalk_1.default.cyan(installTimeDiff)}`);
                if (warnings && warnings.length) {
                    console.log(chalk_1.default.yellowBright(warnings.join('\n')));
                }
                if (!pathExtenderReport)
                    return;
                const output = (0, bvm_reporter_1.renderPathExtenderReport)(pathExtenderReport);
                if (output) {
                    console.log(`\n${output}`);
                }
            }
            catch (error) {
                if (util_1.default.types.isNativeError(error) && error.message.includes('unable to verify the first certificate')) {
                    console.log(chalk_1.default.red(`Error: ${error.message}

You must configure BVM with the right network settings to fix this issue.
See related docs: https://bit.dev/reference/reference/config/network-config/
`));
                    process.exit(1);
                }
                throw error;
            }
        });
    }
    ;
}
exports.InstallCmd = InstallCmd;
exports.command = new InstallCmd();
//# sourceMappingURL=install.js.map