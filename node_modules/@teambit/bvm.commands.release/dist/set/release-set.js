"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.releaseSetCommand = exports.ReleaseSetCmd = void 0;
const chalk_1 = __importDefault(require("chalk"));
const bvm_release_1 = require("@teambit/bvm.release");
class ReleaseSetCmd {
    constructor() {
        this.aliases = ['set'];
        this.describe = 'set release metadata for a specific version';
        this.command = [
            'set <bit-version>'
        ];
    }
    builder(yargs) {
        yargs
            .option({
            'stable': {
                describe: "set the version as stable",
                type: 'boolean',
            }
        })
            .example('$0 set 0.0.800 --stable', 'set version 0.0.800 as stable')
            .example('$0 set 0.0.800 --stable false', 'set version 0.0.800 as not stable');
        return yargs;
    }
    handler(args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!args.bitVersion)
                throw new Error('must provide a version');
            if (args.stable === undefined)
                throw new Error('must provide stable flag');
            const result = yield (0, bvm_release_1.updateReleaseEntry)(args.bitVersion, { stable: args.stable });
            printOutput(result);
        });
    }
    ;
}
exports.ReleaseSetCmd = ReleaseSetCmd;
exports.releaseSetCommand = new ReleaseSetCmd();
function formatOutput(updateResult) {
    const stableText = updateResult.stable ? 'stable' : 'not stable';
    const text = `version ${chalk_1.default.green(updateResult.version)} is now ${chalk_1.default.green(stableText)}`;
    return text;
}
function printOutput(updateResult) {
    const output = formatOutput(updateResult);
    console.log(output);
    return output;
}
//# sourceMappingURL=release-set.js.map