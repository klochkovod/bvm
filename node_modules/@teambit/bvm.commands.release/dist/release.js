"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.command = exports.ReleaseCmd = void 0;
const set_1 = require("./set");
const chalk_1 = __importDefault(require("chalk"));
class ReleaseCmd {
    constructor() {
        this.aliases = ['release'];
        this.describe = false;
        this.command = [
            'release'
        ];
    }
    builder(yargs) {
        yargs
            .command(set_1.releaseSetCommand)
            .example('$0 release set', 'set a release metadata for a specific version');
        return yargs;
    }
    handler(args) {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error('must provide a sub-command');
        });
    }
    ;
}
exports.ReleaseCmd = ReleaseCmd;
exports.command = new ReleaseCmd();
function formatOutput(upgradeResults) {
    const replacedText = upgradeResults.previousCurrentVersion ? `upgraded from version ${chalk_1.default.green(upgradeResults.previousCurrentVersion)}` : undefined;
    const currentText = `current is now linked to version ${chalk_1.default.green(upgradeResults.installedVersion)} in path ${chalk_1.default.green(upgradeResults.versionPath)}`;
    return [replacedText, currentText].filter(msg => msg).join('\n');
}
function printOutput(upgradeResults) {
    const output = formatOutput(upgradeResults);
    console.log(output);
    return output;
}
//# sourceMappingURL=release.js.map