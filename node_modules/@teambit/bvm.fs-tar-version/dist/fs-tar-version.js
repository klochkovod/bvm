"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FsTarVersion = void 0;
const toolbox_time_time_format_1 = require("@teambit/toolbox.time.time-format");
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = require("path");
class FsTarVersion {
    constructor(path) {
        this.path = path;
    }
    get fileName() {
        return (0, path_1.basename)(this.path);
    }
    get dirName() {
        return (0, path_1.dirname)(this.path);
    }
    get version() {
        return this.fileName
            .replace(/\.[^/.]+$/, '')
            .replace(/\.[^/.]+$/, '')
            .split('-')[1];
    }
    copyToDir(destinationDir, opts) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.dirName === destinationDir)
                return this;
            const destination = (0, path_1.join)(destinationDir, this.fileName);
            if (opts.loader) {
                yield copyWithLoader(this.path, destination, opts);
            }
            else {
                yield fs_extra_1.default.copy(this.path, destination, opts);
            }
            return new FsTarVersion(destination);
        });
    }
}
exports.FsTarVersion = FsTarVersion;
function copyWithLoader(src, target, opts) {
    return __awaiter(this, void 0, void 0, function* () {
        const copyLoaderText = `copy from ${src} to ${target}`;
        opts.loader.start(copyLoaderText);
        const moveStartTime = Date.now();
        yield fs_extra_1.default.copy(src, target, opts);
        const moveEndTime = Date.now();
        const moveTimeDiff = (0, toolbox_time_time_format_1.timeFormat)(moveEndTime - moveStartTime);
        opts.loader.succeed(`${copyLoaderText} in ${moveTimeDiff}`);
    });
}
//# sourceMappingURL=fs-tar-version.js.map