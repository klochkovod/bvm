"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.command = exports.ListCmd = void 0;
const tty_table_1 = __importDefault(require("tty-table"));
const bvm_list_1 = require("@teambit/bvm.list");
class ListCmd {
    constructor() {
        this.aliases = ['l', 'list'];
        this.describe = 'list installed bit versions';
        this.command = ['list'];
    }
    static toTable(list) {
        const options = {
            borderStyle: 'solid',
            paddingBottom: 0,
            headerAlign: 'center',
            align: 'left',
            headerColor: 'cyan',
        };
        const headers = [
            {
                value: 'version',
                item: 'version',
                width: 10,
            },
            {
                value: 'url',
                item: 'url',
                width: 70,
                // formatter: function (value) {
                //   if (value == true) return this.style(value, 'green');
                //   return 'false';
                // },
            },
            { value: 'released', item: 'released' },
            { value: 'releaseType', item: 'releaseType', alias: 'release-type', formatter: formatStableGreen },
            // {
            //   value: 'md5Hash',
            //   item: 'md5Hash',
            //   width: 20,
            // },
            // {
            //   value: 'stable',
            //   item: 'stable',
            //   width: 8,
            //   formatter: function (value) {
            //     if (value == true) return this.style(value, 'green');
            //     return 'false';
            //   },
            // },
        ];
        // @ts-ignore
        const table = new tty_table_1.default(headers, list.entries, options);
        return table.render();
    }
    builder(yargs) {
        yargs
            .option({
            remote: {
                alias: ['r'],
                describe: 'show versions exist in the remote server',
                default: false,
                type: 'boolean',
            },
            limit: {
                alias: ['l'],
                describe: 'limit the number shown bit version',
                default: 20,
                type: 'number',
            },
            os: {
                describe: 'override the os type',
                type: 'string',
                choices: ['linux', 'darwin', 'win'],
            },
            arch: {
                describe: 'override the arch type',
                type: 'string',
                choices: ['x64', 'arm64'],
            },
        })
            .example('$0 list', 'show all installed versions')
            .example('$0 list --remote', 'show all versions available for install');
        return yargs;
    }
    handler(args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (args.remote) {
                const list = yield (0, bvm_list_1.listRemote)({ 'limit': args['limit'], 'os': args['os'], 'arch': args['arch'] });
                console.log(ListCmd.toTable(list));
                return;
            }
            const list = yield (0, bvm_list_1.listLocal)();
            console.log(localListOutput(list.toVersionsStringArray()));
            return;
        });
    }
}
exports.ListCmd = ListCmd;
exports.command = new ListCmd();
function localListOutput(versions) {
    if (!versions || !versions.length) {
        return 'there are no installed version, use bvm install to install new versions';
    }
    return versions.join('\n');
}
function formatStableGreen(value) {
    return value === 'stable' ? this.style(value, "green", "bold") : value;
}
//# sourceMappingURL=list.js.map