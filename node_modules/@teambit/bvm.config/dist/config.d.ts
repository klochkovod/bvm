export declare const BVM_ENV_VARS_PREFIX = "BVM_";
export declare const BVM_GLOBALS_DIR_ENV_VARIABLE = "BVM_GLOBALS_DIR";
export declare const IS_WINDOWS: boolean;
export declare const CONFIG_DIR = "config";
export declare const CONFIG_FILENAME = "config.json";
export declare const ALIASES_KEY = "aliases";
export declare const LINKS_KEY = "links";
export declare const BIT_VERSIONS_FOLDER_NAME = "versions";
export declare const NODE_VERSIONS_FOLDER_NAME = "nodejs";
export declare const CFG_BVM_DIR = "BVM_DIR";
export declare const CFG_RELEASE_TYPE = "RELEASE_TYPE";
export declare const CFG_EXTRACT_METHOD = "EXTRACT_METHOD";
export declare const CFG_SKIP_TEMP_DIR = "SKIP_TEMP_DIR";
export declare const CFG_PROXY = "proxy";
export declare const CFG_HTTPS_PROXY = "https_proxy";
export declare const CFG_PROXY_CA = "proxy.ca";
export declare const CFG_PROXY_CA_FILE = "proxy.cafile";
export declare const CFG_PROXY_NO_PROXY = "proxy.no_proxy";
export declare const CFG_NETWORK_LOCAL_ADDRESS = "network.local_address";
export declare const CFG_NETWORK_MAX_SOCKETS = "network.max_sockets";
export declare const CFG_NETWORK_CA = "network.ca";
export declare const CFG_NETWORK_CA_FILE = "network.cafile";
export declare const CFG_NETWORK_STRICT_SSL = "network.strict-ssl";
export declare const CFG_NETWORK_CERT = "network.cert";
export declare const CFG_NETWORK_KEY = "network.key";
export declare const CFG_GCP_ACCESS_KEY = "gcp_access_key";
export declare const CFG_GCP_SECRET_KEY = "gcp_secret_key";
export declare const CFG_PROXY_STRICT_SSL = "proxy.strict_ssl";
export declare const CFG_PROXY_CERT = "proxy.cert";
export declare const CFG_PROXY_KEY = "proxy.key";
export declare const KNOWN_KEYS: string[];
export declare type ConfigSource = "env" | "argv" | "file";
export declare type ConfigSources = ConfigSource[];
export declare class Config {
    private name;
    private filePath;
    private store;
    private fsStore;
    constructor(name: string, filePath: string, defaults?: any, _sources?: ConfigSources);
    static load(newInstance?: boolean, sources?: ConfigSources): Config;
    get(key: string): any;
    set(key: string, value: any): void;
    persist(): void;
    del(key: string): void;
    list(persistedOnly?: boolean): any;
    path(): string;
    getBvmDirectory(): string;
    getTempDir(): string;
    getDefaultLinkName(): string;
    getExtractMethod(): string;
    getSkipTempDir(): boolean;
    getBitVersionsDir(): string;
    getSpecificVersionDir(version: string, innerDir?: boolean): {
        versionDir: string;
        exists: boolean;
    };
    getNodeVersionsDir(): string;
    getSpecificNodeVersionDir(version: string): {
        versionDir: string;
        exists: boolean;
    };
    /**
     * Returns the Node.js version which is required by the given Bit CLI.
     */
    getWantedNodeVersion(innerVersionDir: string): string | undefined;
    /**
     * We use a pnpm component for downloading Node.js.
     * pnpm writes the Node.js files to a content-addressable store.
     * We could use pnpm's global store location as well but its location may vary on different systems.
     * So we just create a dedicated content-addressable store for Node.js artifacts in the bvm directory.
     */
    getCafsDir(): string;
    getAliases(): Record<string, string>;
    getLinks(): Record<string, string>;
    getReleaseType(): any;
    setLink(linkName: string, value: string): string;
    getDefaultLinkVersion(): string | undefined;
    networkConfig(): {
        ca: any;
        cafile: any;
        cert: any;
        key: any;
        localAddress: any;
        maxSockets: any;
        strictSSL: any;
    };
    gcpConfig(): {
        accessKey: any;
        secretKey: any;
    };
    proxyConfig(): {
        httpProxy?: undefined;
        httpsProxy?: undefined;
        noProxy?: undefined;
    } | {
        httpProxy: any;
        httpsProxy: any;
        noProxy: any;
    };
}
