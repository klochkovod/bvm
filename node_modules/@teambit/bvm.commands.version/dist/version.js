"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.showAllVersions = exports.command = exports.VersionCmd = void 0;
const chalk_1 = __importDefault(require("chalk"));
const bvm_config_1 = require("@teambit/bvm.config");
const bvm_version_1 = require("@teambit/bvm.version");
const bvm_list_1 = require("@teambit/bvm.list");
const semver_1 = __importDefault(require("semver"));
const defaultShowVersionOptions = {
    includeRemote: true,
};
class VersionCmd {
    constructor() {
        this.aliases = ["version", "versions"];
        this.describe = "show used (current) version, latest installed version and latest remote version (bit and bvm)";
        this.command = ["version"];
    }
    builder(yargs) {
        yargs
            .option({
            "include-remote": {
                describe: "show latest remote version",
                default: true,
                type: "boolean",
            },
        })
            .example("$0 version", "show used (current) version, latest installed version and latest remote version")
            .example("$0 version --include-remote false", "show used (current) version and latest installed version (without latest remote version)");
        return yargs;
    }
    handler(args) {
        return __awaiter(this, void 0, void 0, function* () {
            const output = yield showAllVersions(args);
            return console.log(output);
        });
    }
}
exports.VersionCmd = VersionCmd;
exports.command = new VersionCmd();
function showAllVersions(options = defaultShowVersionOptions) {
    return __awaiter(this, void 0, void 0, function* () {
        const actualOpts = Object.assign({}, defaultShowVersionOptions, options);
        const config = bvm_config_1.Config.load();
        const currentBvmVersion = actualOpts.overrideLocalVersion
            ? actualOpts.overrideLocalVersion
            : yield (0, bvm_version_1.getBvmLocalVersion)();
        const latestBvmRemoteVersion = actualOpts.includeRemote
            ? yield (0, bvm_version_1.getBvmRemoteVersion)()
            : undefined;
        const remoteVersionsList = yield (0, bvm_list_1.listRemote)({
            releaseType: bvm_list_1.ReleaseTypeFilter.ALL,
        });
        const remoteVersionsListMap = remoteVersionsList.toMap();
        const currentVersionString = config.getDefaultLinkVersion();
        const currentVersion = currentVersionString
            ? new bvm_list_1.Version(currentVersionString, remoteVersionsListMap.get(currentVersionString))
            : undefined;
        const releaseType = config.getReleaseType();
        const latestInstalledVersion = (yield (0, bvm_list_1.listLocal)()).latest();
        const latestRemoteStableVersion = actualOpts.includeRemote
            ? remoteVersionsList.versionsByReleaseType([bvm_list_1.ReleaseType.STABLE]).latest()
            : undefined;
        let latestRemoteNightlyVersion = actualOpts.includeRemote && releaseType === bvm_list_1.ReleaseTypeFilter.NIGHTLY
            ? remoteVersionsList.versionsByReleaseType([bvm_list_1.ReleaseType.NIGHTLY]).latest()
            : undefined;
        // latest nightly should be latest stable if stable is more recent
        if ((latestRemoteNightlyVersion === null || latestRemoteNightlyVersion === void 0 ? void 0 : latestRemoteNightlyVersion.version) &&
            (latestRemoteStableVersion === null || latestRemoteStableVersion === void 0 ? void 0 : latestRemoteStableVersion.version) &&
            semver_1.default.lt(latestRemoteNightlyVersion.version, latestRemoteStableVersion.version)) {
            latestRemoteNightlyVersion = latestRemoteStableVersion;
        }
        const localBitVersions = {
            currentVersion,
            latestInstalledVersion,
        };
        const remoteBitVersions = {
            latestRemoteStableVersion,
            latestRemoteNightlyVersion,
        };
        const output = formatOutput({
            currentBvmVersion,
            latestBvmRemoteVersion,
            localBitVersions,
            remoteBitVersions,
        });
        return output;
    });
}
exports.showAllVersions = showAllVersions;
function formatOutput(versions) {
    var _a, _b, _c, _d;
    // BVM versions
    const currentBvmVersionOutput = versions.currentBvmVersion
        ? `current (used) bvm version: ${chalk_1.default.green(versions.currentBvmVersion)}`
        : `current (used) bvm version: ${chalk_1.default.red("unknown")}`;
    const latestRemoteBvmOutput = versions.latestBvmRemoteVersion
        ? `latest available bvm version: ${chalk_1.default.green(versions.latestBvmRemoteVersion)}`
        : undefined;
    // Bit versions - local then remote
    const { currentVersion, latestInstalledVersion } = versions.localBitVersions;
    const currentVersionOutput = currentVersion
        ? `current (used) bit version: ${chalk_1.default.green(`${currentVersion.version} (${(_b = (_a = currentVersion.releaseType) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : "stable"})`)}`
        : undefined;
    const latestInstalled = latestInstalledVersion
        ? `latest installed bit version: ${chalk_1.default.green(`${latestInstalledVersion.version} (${(_d = (_c = latestInstalledVersion.releaseType) === null || _c === void 0 ? void 0 : _c.toString()) !== null && _d !== void 0 ? _d : "stable"})`)}`
        : undefined;
    const { latestRemoteNightlyVersion, latestRemoteStableVersion } = versions.remoteBitVersions;
    const latestRemoteStable = latestRemoteStableVersion
        ? `latest available stable bit version: ${chalk_1.default.green(latestRemoteStableVersion.version)}`
        : undefined;
    const latestRemoteNightly = latestRemoteNightlyVersion
        ? `latest available nightly bit version: ${chalk_1.default.green(latestRemoteNightlyVersion.version)}`
        : undefined;
    const newerBvmOutput = (0, bvm_version_1.getNewerBvmAvailableOutput)(versions.currentBvmVersion, versions.latestBvmRemoteVersion);
    const newerBitOutput = getNewerBitAvailableOutput(versions.localBitVersions, versions.remoteBitVersions);
    const outputs = [
        currentBvmVersionOutput,
        latestRemoteBvmOutput,
        currentVersionOutput,
        latestInstalled,
        latestRemoteStable,
        latestRemoteNightly,
        "\n",
        newerBvmOutput,
        newerBitOutput,
    ].filter((output) => output);
    return outputs.join("\n");
}
function getNewerBitAvailableOutput(localVersions, remoteVersions) {
    const { currentVersion, latestInstalledVersion } = localVersions;
    const { latestRemoteNightlyVersion, latestRemoteStableVersion } = remoteVersions;
    if (!currentVersion) {
        return undefined;
    }
    if (!latestInstalledVersion &&
        !latestRemoteStableVersion &&
        !latestRemoteNightlyVersion) {
        return undefined;
    }
    const moreRecentLocalVersionOutput = latestInstalledVersion &&
        semver_1.default.gt(latestInstalledVersion.version, currentVersion.version)
        ? `\nNOTE: you have a more recent version of bit (${latestInstalledVersion.version}) installed - run "${chalk_1.default.cyan(`bvm use ${latestInstalledVersion.version}`)}" to use your latest installed version`
        : undefined;
    function newVersionAvailableText(versionToCheck) {
        var _a;
        if (!versionToCheck)
            return undefined;
        const { version, releaseType } = versionToCheck;
        const commandToRun = versionToCheck.releaseType === bvm_list_1.ReleaseType.STABLE
            ? `bvm install ${version}`
            : "bvm upgrade";
        if (version && semver_1.default.gt(version, currentVersion.version)) {
            return (`${chalk_1.default.greenBright("new")} ${(_a = releaseType === null || releaseType === void 0 ? void 0 : releaseType.toString()) !== null && _a !== void 0 ? _a : ""} version (${version}) of ${chalk_1.default.cyan("bit")} ` +
                `is available, upgrade ${chalk_1.default.cyan("bit")} to the latest version by running "${chalk_1.default.cyan(commandToRun)}"\n`);
        }
    }
    const bitVersionsGhLink = "\nhttps://github.com/teambit/bit/releases";
    const output = [
        newVersionAvailableText(latestRemoteStableVersion),
        newVersionAvailableText(latestRemoteNightlyVersion),
        moreRecentLocalVersionOutput,
        bitVersionsGhLink,
    ].join("");
    return output;
}
//# sourceMappingURL=version.js.map