"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.linkOne = exports.linkDefault = exports.linkAll = void 0;
const os_env_path_extender_1 = require("@pnpm/os.env.path-extender");
const bvm_config_1 = require("@teambit/bvm.config");
const bvm_list_1 = require("@teambit/bvm.list");
const cmd_shim_1 = __importDefault(require("@zkochan/cmd-shim"));
const path_1 = __importDefault(require("path"));
const symlink_dir_1 = __importDefault(require("symlink-dir"));
const bin_links_1 = __importDefault(require("bin-links"));
const bvm_error_1 = require("@teambit/bvm.error");
const os_1 = __importDefault(require("os"));
const semver_1 = __importDefault(require("semver"));
const IS_WINDOWS = os_1.default.platform() === 'win32';
const DOCS_BASE_URL = 'https://bit.dev/docs';
const DOCS_REFERENCE_BASE_URL = 'https://bit.dev/reference';
const WINDOWS_INSTALL_TROUBLESHOOTING_DOCS_URL = `${DOCS_REFERENCE_BASE_URL}/reference/using-bvm#troubleshooting`;
const MAC_LINUX_INSTALL_TROUBLESHOOTING_DOCS_URL = `${DOCS_REFERENCE_BASE_URL}/reference/using-bvm#troubleshooting`;
const config = bvm_config_1.Config.load();
function linkAll(opts) {
    return __awaiter(this, void 0, void 0, function* () {
        const links = config.getLinks();
        const defaultLinkVersion = config.getDefaultLinkVersion();
        const localLatest = (yield (0, bvm_list_1.listLocal)()).latest();
        const promises = Object.entries(links).map(([linkName, version]) => {
            return linkOne(linkName, version, {
                addToConfig: false,
                addToPathIfMissing: opts.addToPathIfMissing,
                useSystemNode: opts.useSystemNode,
            });
        });
        if (!defaultLinkVersion && localLatest) {
            const defaultLinkName = config.getDefaultLinkName();
            promises.push(linkOne(defaultLinkName, localLatest.version, {
                addToConfig: true,
                addToPathIfMissing: opts.addToPathIfMissing,
                useSystemNode: opts.useSystemNode,
            }));
        }
        return Promise.all(promises);
    });
}
exports.linkAll = linkAll;
function linkDefault(version, opts = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        const defaultLinkName = config.getDefaultLinkName();
        return linkOne(defaultLinkName, version, Object.assign({ addToConfig: true }, opts));
    });
}
exports.linkDefault = linkDefault;
function linkOne(linkName, version, opts = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        const source = getLinkSource();
        let concreteVersion = version;
        if (!concreteVersion || concreteVersion === 'latest') {
            const localLatest = (yield (0, bvm_list_1.listLocal)()).latest();
            concreteVersion = localLatest.version;
        }
        if (concreteVersion === 'stable') {
            const localStable = (yield (0, bvm_list_1.listLocal)()).stable();
            if (!localStable) {
                throw new bvm_error_1.BvmError(`no stable version found installed`);
            }
            concreteVersion = localStable.version;
        }
        const { versionDir, exists } = config.getSpecificVersionDir(concreteVersion, true);
        if (!exists) {
            throw new bvm_error_1.BvmError(`version ${concreteVersion} is not installed`);
        }
        let nodeExecPath;
        const wantedNodeVersion = config.getWantedNodeVersion(versionDir);
        const warnings = [];
        if (!opts.useSystemNode) {
            if (wantedNodeVersion) {
                const node = config.getSpecificNodeVersionDir(wantedNodeVersion);
                if (!node.exists) {
                    throw new bvm_error_1.BvmError(`Node.js version ${wantedNodeVersion} is not installed. Try to reinstall the wanted bit CLI version with the --override option`);
                }
                nodeExecPath = path_1.default.join(node.versionDir, process.platform === 'win32' ? 'node.exe' : 'bin/node');
            }
        }
        else if (semver_1.default.lt(process.version, wantedNodeVersion)) {
            warnings.push(`The system Node.js is ${process.version} while Bit CLI requires at least Node.js ${wantedNodeVersion}!`);
        }
        const pkg = {
            bin: {
                [linkName]: source
            }
        };
        const binOpts = {
            path: versionDir,
            pkg,
            global: true,
            top: true,
            force: true,
        };
        const rawGeneratedLinks = bin_links_1.default.getPaths(binOpts);
        const generatedLink = {
            source: versionDir,
            target: rawGeneratedLinks[0]
        };
        const currentDir = path_1.default.join(config.getBvmDirectory(), 'links', linkName);
        yield (0, symlink_dir_1.default)(generatedLink.source, currentDir);
        yield (0, cmd_shim_1.default)(path_1.default.join(currentDir, source), generatedLink.target, {
            // Unsigned PowerShell scripts are not allowed on Windows with default settings,
            // so it is better to not use them.
            createPwshFile: false,
            nodeExecPath,
            prependToPath: nodeExecPath ? path_1.default.dirname(nodeExecPath) : undefined,
        });
        let previousLinkVersion;
        if (opts.addToConfig) {
            previousLinkVersion = config.setLink(linkName, concreteVersion);
        }
        let binDir = path_1.default.join(os_1.default.homedir(), 'bin');
        if (IS_WINDOWS) {
            binDir = config.getBvmDirectory();
        }
        const { pathExtenderReport, warning } = yield validateBinDirInPath(binDir, opts);
        if (warning) {
            warnings.push(warning);
        }
        return {
            linkName,
            previousLinkVersion,
            version: concreteVersion,
            generatedLink,
            pathExtenderReport,
            warnings,
        };
    });
}
exports.linkOne = linkOne;
function getLinkSource() {
    const bitBinPath = getBitBinPath();
    const source = path_1.default.join('.', 'node_modules', bitBinPath);
    return source;
}
function getBitBinPath() {
    return path_1.default.join('@teambit', 'bit', 'bin', 'bit');
}
function validateBinDirInPath(binDir, opts = { addToPathIfMissing: true }) {
    return __awaiter(this, void 0, void 0, function* () {
        const osPaths = (process.env.PATH || process.env.Path || process.env.path).split(path_1.default.delimiter);
        if (osPaths.indexOf(binDir) !== -1)
            return {};
        if (!opts.addToPathIfMissing) {
            const warningLines = [
                'global Bit install location was not found in your PATH global variable.',
                missingInPathError(binDir),
                '',
            ];
            return { warning: warningLines.join('\n') };
        }
        else {
            try {
                const pathExtenderReport = yield (0, os_env_path_extender_1.addDirToEnvPath)(binDir, {
                    overwrite: true,
                    position: 'end',
                    configSectionName: 'bit',
                });
                return { pathExtenderReport };
            }
            catch (err) {
                if (err.code === 'ERR_PNPM_UNKNOWN_SHELL') {
                    return {
                        warning: `Couldn't update the system PATH because failed to detect the active shell.
You can either set the SHELL env variable to your shell name (e.g., "SHELL=bash bvm install")
or ${missingInPathError(binDir)}`
                    };
                }
                return {
                    warning: `Couldn't update the system path: ${err.message}
${missingInPathError(binDir)}`
                };
            }
        }
    });
}
function missingInPathError(binDir) {
    if (IS_WINDOWS) {
        return `run the following command and then re-open the terminal:
setx path "%path%;${binDir}" and re-open your terminal
for more information read here - ${WINDOWS_INSTALL_TROUBLESHOOTING_DOCS_URL}`;
    }
    return `add the following to your bash/zsh profile then re-open the terminal:
export PATH=$HOME/bin:$PATH
for more information read here - ${MAC_LINUX_INSTALL_TROUBLESHOOTING_DOCS_URL}`;
}
//# sourceMappingURL=link.js.map