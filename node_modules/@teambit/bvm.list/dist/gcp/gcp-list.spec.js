"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const gcp_list_1 = require("./gcp-list");
const node_fetch_1 = __importDefault(require("node-fetch"));
const list_1 = require("../list");
jest.mock("node-fetch", () => jest.fn());
describe("GcpList", () => {
    it("should return the correct URL on Windows", () => __awaiter(void 0, void 0, void 0, function* () {
        mockFetch([
            {
                version: "1.0.0",
                date: "2020-01-01",
                nightly: true,
            },
        ]);
        const gcpList = (0, list_1.getGcpList)({
            releaseType: gcp_list_1.ReleaseTypeFilter.NIGHTLY,
            os: "Windows_NT",
            arch: "x64",
        });
        const list = yield gcpList.list();
        expect(list.entries[0].url).toBe("https://bvm.bit.dev/bit/versions/1.0.0/bit-1.0.0-win-x64.tar.gz");
    }));
    it("should return the correct URL on Linux", () => __awaiter(void 0, void 0, void 0, function* () {
        mockFetch([
            {
                version: "1.0.0",
                date: "2020-01-01",
                nightly: true,
            },
        ]);
        const gcpList = (0, list_1.getGcpList)({
            releaseType: gcp_list_1.ReleaseTypeFilter.NIGHTLY,
            os: "Linux",
            arch: "x64",
        });
        const list = yield gcpList.list();
        expect(list.entries[0].url).toBe("https://bvm.bit.dev/bit/versions/1.0.0/bit-1.0.0-linux-x64.tar.gz");
    }));
    it("should return the correct URL on Linux with arm64 CPU", () => __awaiter(void 0, void 0, void 0, function* () {
        mockFetch([
            {
                version: "1.0.0",
                date: "2020-01-01",
                nightly: true,
            },
        ]);
        const gcpList = (0, list_1.getGcpList)({
            releaseType: gcp_list_1.ReleaseTypeFilter.NIGHTLY,
            os: "Linux",
            arch: "arm64",
        });
        const list = yield gcpList.list();
        expect(list.entries[0].url).toBe("https://bvm.bit.dev/bit/versions/1.0.0/bit-1.0.0-linux-arm64.tar.gz");
    }));
    it("should return the correct URL on macOS", () => __awaiter(void 0, void 0, void 0, function* () {
        mockFetch([
            {
                version: "1.0.0",
                date: "2020-01-01",
                nightly: true,
            },
        ]);
        const gcpList = (0, list_1.getGcpList)({
            releaseType: gcp_list_1.ReleaseTypeFilter.NIGHTLY,
            os: "Darwin",
            arch: "x64",
        });
        const list = yield gcpList.list();
        expect(list.entries[0].url).toBe("https://bvm.bit.dev/bit/versions/1.0.0/bit-1.0.0-darwin-x64.tar.gz");
    }));
    it("should return the correct URL on macOS with arm64 CPU", () => __awaiter(void 0, void 0, void 0, function* () {
        mockFetch([
            {
                version: "1.0.0",
                date: "2020-01-01",
                nightly: true,
            },
        ]);
        const gcpList = (0, list_1.getGcpList)({
            releaseType: gcp_list_1.ReleaseTypeFilter.NIGHTLY,
            os: "Darwin",
            arch: "arm64",
        });
        const list = yield gcpList.list();
        expect(list.entries[0].url).toBe("https://bvm.bit.dev/bit/versions/1.0.0/bit-1.0.0-darwin-arm64.tar.gz");
    }));
    it("should return only stable releases", () => __awaiter(void 0, void 0, void 0, function* () {
        mockFetch([
            {
                version: "1.0.0",
                date: "2020-01-01",
                stable: true,
                nightly: true,
            },
            {
                version: "2.0.0",
                date: "2020-01-01",
                nightly: true,
            },
            {
                version: "3.0.0",
                date: "2020-01-01",
                stable: true,
            },
        ]);
        const gcpList = (0, list_1.getGcpList)({
            releaseType: gcp_list_1.ReleaseTypeFilter.STABLE,
            os: "Windows_NT",
            arch: "x64",
        });
        const list = yield gcpList.list();
        expect(list.entries.length).toBe(2);
        expect(list.entries[0].version).toBe("1.0.0");
        expect(list.entries[1].version).toBe("3.0.0");
    }));
});
function mockFetch(releases) {
    node_fetch_1.default["mockReturnValue"](Promise.resolve({
        json: () => Promise.resolve(releases),
    }));
}
//# sourceMappingURL=gcp-list.spec.js.map