"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GcpVersion = void 0;
const version_1 = require("../version");
const gcp_list_1 = require("./gcp-list");
class GcpVersion {
    constructor(version, fileName, host, md5hash, timeCreated, metadata, protocol = 'https', releaseType) {
        this.version = version;
        this.fileName = fileName;
        this.host = host;
        this.md5hash = md5hash;
        this.timeCreated = timeCreated;
        this.metadata = metadata;
        this.protocol = protocol;
        this.releaseType = releaseType;
    }
    get url() {
        return `${this.protocol}://${this.host}/${this.fileName}`;
    }
    /** is version is stable version  */
    get calculatedReleaseType() {
        var _a, _b;
        const type = ((_a = this.metadata) === null || _a === void 0 ? void 0 : _a.stable) ? gcp_list_1.ReleaseType.STABLE : (_b = this.releaseType) !== null && _b !== void 0 ? _b : gcp_list_1.ReleaseType.NIGHTLY; // TODO @giladshoam what's the metadata doing here? Can we get rid of it and just use releaseType when storing the version?
        return type;
    }
    toRemoteVersion() {
        return new version_1.RemoteVersion(this.version, this.url, this.md5hash, this.timeCreated, this.calculatedReleaseType);
    }
    toObject() {
        return {
            url: this.url,
            version: this.version,
        };
    }
}
exports.GcpVersion = GcpVersion;
//# sourceMappingURL=gcp-version.js.map