import { GcpStorage } from '@teambit/gcp.storage';
import { RemoteVersionList } from '../version-list';
import { RemoteVersion } from '../version';
export declare enum ReleaseTypeFilter {
    NIGHTLY_FROM_OLD_LOCATION = "nightly-from-old-location",
    DEV = "dev",
    NIGHTLY = "nightly",
    STABLE = "stable",
    ALL = "all"
}
export declare enum ReleaseType {
    DEV = "dev",
    NIGHTLY = "nightly",
    STABLE = "stable"
}
export declare type Release = {
    version: string;
    date: string;
} & Partial<Record<ReleaseType, true>>;
export declare class GcpList {
    private gcpStorage;
    private proxyConfig;
    private osType;
    private arch;
    private releaseTypeFilter;
    constructor(gcpStorage: GcpStorage, proxyConfig?: {}, osType?: string, arch?: string, releaseTypeFilter?: ReleaseTypeFilter);
    list(): Promise<RemoteVersionList>;
    getIndexJsonUrl(): string;
    fetchIndex(): Promise<Release[]>;
    updateReleaseEntry(version: string, releaseTypeUpdates: Partial<Record<ReleaseType, boolean>>): Promise<Release>;
    _createRemoteVersion(release: Release): RemoteVersion;
    rawFiles(): Promise<any>;
    static create(releaseTypeFilter?: ReleaseTypeFilter, osType?: string, arch?: string, proxyConfig?: {}, accessKey?: string, secretKey?: string): GcpList;
}
