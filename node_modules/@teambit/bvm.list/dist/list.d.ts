import { GcpList, ReleaseTypeFilter } from './gcp';
import { LocalVersionList, RemoteVersionList } from './version-list';
export declare type GcpListOptions = {
    releaseType?: ReleaseTypeFilter;
    os?: 'linux' | 'darwin' | 'win' | 'Windows_NT' | 'Linux' | 'Darwin';
    arch?: 'x64' | 'arm64';
};
export declare type ListOptions = GcpListOptions & {
    limit?: number;
};
declare type OS_TYPE = 'win' | 'linux' | 'darwin';
export declare const supportedPlatforms: {
    linux: string[];
    win: string[];
    darwin: string[];
};
export declare const OS_TYPES: {
    linux: string;
    windows_nt: string;
    win: string;
    darwin: string;
};
export declare function getGcpList(options?: GcpListOptions): GcpList;
export declare function getOsType(osName?: string): OS_TYPE;
/**
 * It throws an error if the given platform is not supported
 * @param {string} osType - The operating system type.
 * @param {string} arch - The architecture of the target platform.
 */
export declare function validatePlatform(osType: string, arch: string): string;
export declare function listRemote(options?: ListOptions): Promise<RemoteVersionList>;
export declare function listLocal(): Promise<LocalVersionList>;
export declare function latestFromArray(versions: string[]): string;
export {};
