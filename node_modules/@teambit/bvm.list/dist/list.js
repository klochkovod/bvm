"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.latestFromArray = exports.listLocal = exports.listRemote = exports.validatePlatform = exports.getOsType = exports.getGcpList = exports.OS_TYPES = exports.supportedPlatforms = void 0;
const os_1 = __importDefault(require("os"));
const gcp_1 = require("./gcp");
const bvm_config_1 = require("@teambit/bvm.config");
const semver_1 = __importDefault(require("semver"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const version_list_1 = require("./version-list");
const version_1 = require("./version");
exports.supportedPlatforms = {
    'linux': ['x64', 'arm64'],
    'win': ['x64'],
    'darwin': ['x64', 'arm64'],
};
exports.OS_TYPES = {
    'linux': 'linux',
    'windows_nt': 'win',
    'win': 'win',
    'darwin': 'darwin'
};
const FALLBACK_ARCH = 'x64';
const config = bvm_config_1.Config.load();
function getGcpList(options) {
    var _a, _b;
    const releaseType = (_a = options === null || options === void 0 ? void 0 : options.releaseType) !== null && _a !== void 0 ? _a : config.getReleaseType();
    const { accessKey, secretKey } = config.gcpConfig();
    const osType = getOsType(options === null || options === void 0 ? void 0 : options.os);
    const arch = (_b = options === null || options === void 0 ? void 0 : options.arch) !== null && _b !== void 0 ? _b : process.arch;
    const archWithFallback = validatePlatform(osType, arch);
    const gcpList = gcp_1.GcpList.create(releaseType, osType, archWithFallback, Object.assign(Object.assign({}, config.networkConfig()), config.proxyConfig()), accessKey, secretKey);
    return gcpList;
}
exports.getGcpList = getGcpList;
function getOsType(osName) {
    const osType = exports.OS_TYPES[(osName || os_1.default.type()).toLowerCase()];
    return osType;
}
exports.getOsType = getOsType;
/**
 * It throws an error if the given platform is not supported
 * @param {string} osType - The operating system type.
 * @param {string} arch - The architecture of the target platform.
 */
function validatePlatform(osType, arch) {
    if (!exports.supportedPlatforms[osType]) {
        throw new Error(`unsupported platform ${osType}`);
    }
    if (!exports.supportedPlatforms[osType].includes(arch)) {
        console.log(`unsupported arch: ${arch} for os: ${osType}. fallback to ${FALLBACK_ARCH}`);
        return FALLBACK_ARCH;
    }
    return arch;
}
exports.validatePlatform = validatePlatform;
function listRemote(options) {
    return __awaiter(this, void 0, void 0, function* () {
        const gcpList = getGcpList(options);
        const list = yield gcpList.list();
        if (!(options === null || options === void 0 ? void 0 : options.limit))
            return list;
        return list.slice(options === null || options === void 0 ? void 0 : options.limit);
        // return options['release-type'] === ReleaseType.STABLE ? list.sortBySemver('desc') : list;
    });
}
exports.listRemote = listRemote;
function listLocal() {
    return __awaiter(this, void 0, void 0, function* () {
        const versionsDir = config.getBitVersionsDir();
        const exists = yield fs_extra_1.default.pathExists(versionsDir);
        if (!exists)
            return new version_list_1.LocalVersionList([]);
        const dirEntries = yield fs_extra_1.default.readdir(versionsDir, { withFileTypes: true });
        const gcpList = getGcpList();
        const versionsMap = (yield gcpList.list()).toMap();
        const versions = dirEntries
            .filter((dirent) => {
            return (dirent.isDirectory() || dirent.isSymbolicLink()) && semver_1.default.valid(dirent.name);
        })
            .map((dirent) => {
            const version = dirent.name;
            const { versionDir } = config.getSpecificVersionDir(version);
            const releaseType = versionsMap.get(version);
            const localVersion = new version_1.LocalVersion(version, versionDir, releaseType);
            return localVersion;
        });
        return new version_list_1.LocalVersionList(versions);
    });
}
exports.listLocal = listLocal;
function latestFromArray(versions) {
    const latest = semver_1.default.maxSatisfying(versions, '*');
    return latest;
}
exports.latestFromArray = latestFromArray;
//# sourceMappingURL=list.js.map