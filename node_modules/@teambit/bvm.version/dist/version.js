"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNewerBvmAvailableOutput = exports.getBvmRemoteVersion = exports.getBvmLocalVersion = void 0;
const chalk_1 = __importDefault(require("chalk"));
const util_1 = __importDefault(require("util"));
const child_process_1 = require("child_process");
const semver_1 = __importDefault(require("semver"));
const execP = util_1.default.promisify(child_process_1.exec);
const BVM_PACKAGE_NAME = "@teambit/bvm";
function getBvmLocalVersion() {
    return __awaiter(this, void 0, void 0, function* () {
        const { stdout } = yield execP("bvm local-version");
        const stdoutString = stdout.toString().trim();
        const result = semver_1.default.valid(stdoutString) ? stdoutString : undefined;
        return result;
    });
}
exports.getBvmLocalVersion = getBvmLocalVersion;
function getBvmRemoteVersion() {
    return __awaiter(this, void 0, void 0, function* () {
        const { stdout } = yield execP("npm view @teambit/bvm version");
        return stdout.toString().trim();
    });
}
exports.getBvmRemoteVersion = getBvmRemoteVersion;
function getNewerBvmAvailableOutput(currentBvmVersion, latestBvmRemoteVersion) {
    if (!currentBvmVersion || !latestBvmRemoteVersion) {
        return undefined;
    }
    if (semver_1.default.gt(latestBvmRemoteVersion, currentBvmVersion)) {
        const npmCommand = chalk_1.default.cyan(`npm install -g ${BVM_PACKAGE_NAME}`);
        const pnpmCommand = chalk_1.default.cyan(`pnpm add -g ${BVM_PACKAGE_NAME}`);
        const yarnCommand = chalk_1.default.cyan(`yarn global add ${BVM_PACKAGE_NAME}`);
        return `new version of ${chalk_1.default.cyan("bvm")} is available (${latestBvmRemoteVersion}), upgrade your ${chalk_1.default.cyan("bvm")} by running "${npmCommand}", "${pnpmCommand}" or "${yarnCommand}"\n`;
    }
}
exports.getNewerBvmAvailableOutput = getNewerBvmAvailableOutput;
//# sourceMappingURL=version.js.map